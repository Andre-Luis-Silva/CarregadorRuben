
ProjetoCarregadorRuben.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000061a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000e0  00000000  00000000  00000649  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000729  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3f  00000000  00000000  00000769  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067f  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000174  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000598  00000598  0000060c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ConfigADC 0000000e  00000516  00000516  0000058a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ConfigGPIO 0000000e  00000524  00000524  00000598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ConfigPWM 00000016  000004ea  000004ea  0000055e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ReadAdc 0000002c  0000049c  0000049c  00000510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    000001e4  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text         0000000a  00000576  00000576  000005ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text         0000000e  00000532  00000532  000005a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text         0000005e  000003b2  000003b2  00000426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text         0000007a  00000338  00000338  000003ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text         00000048  00000410  00000410  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text         00000044  00000458  00000458  000004cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text         0000000e  00000540  00000540  000005b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text         0000000a  00000580  00000580  000005f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         00000008  0000058a  0000058a  000005fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         000000d4  00000264  00000264  000002d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         0000000c  0000056a  0000056a  000005de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         00000006  00000592  00000592  00000606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text         0000000e  0000054e  0000054e  000005c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text         0000000e  0000055c  0000055c  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         00000022  000004c8  000004c8  0000053c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_fini 00000002  000005a0  000005a0  00000614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_funcs_on_exit 00000002  000005a2  000005a2  00000616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_simulator_exit 00000002  000005a4  000005a4  00000618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.exit    00000016  00000500  00000500  00000574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text._Exit   00000004  0000059c  0000059c  00000610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
   8:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
   c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  10:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  14:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  18:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  1c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  20:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  24:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  28:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  2c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  30:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  34:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  38:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  3c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  40:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  44:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  48:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  4c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  50:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  54:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  58:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  5c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  60:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>
  64:	0c 94 cc 02 	jmp	0x598	; 0x598 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 80 02 	jmp	0x500	; 0x500 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000598 <__bad_interrupt>:
 598:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ConfigADC:

00000516 <ConfigADC>:
{
  /* 
  The ADC was configured using the 1.1 internal regulator to make 
  the measure of the voltage of battery 
  */
  ADMUX = (1 << REFS1) | (1 << REFS0);
 516:	80 ec       	ldi	r24, 0xC0	; 192
 518:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ADCSRA = (1 << ADEN);
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 522:	08 95       	ret

Disassembly of section .text.ConfigGPIO:

00000524 <ConfigGPIO>:
}

void ConfigGPIO(void)
{
  /* The Output pins are PB1, PB2 and PD2 */
  DDRB |= (1 << PB1) | (1 << PB2);
 524:	84 b1       	in	r24, 0x04	; 4
 526:	86 60       	ori	r24, 0x06	; 6
 528:	84 b9       	out	0x04, r24	; 4
  DDRD |= (1 << PD2);
 52a:	8a b1       	in	r24, 0x0a	; 10
 52c:	84 60       	ori	r24, 0x04	; 4
 52e:	8a b9       	out	0x0a, r24	; 10
 530:	08 95       	ret

Disassembly of section .text.ConfigPWM:

000004ea <ConfigPWM>:
{
  /* 
  The Timer1 was configured to Fast PWM, without prescaler
  and a frequency in 62.5 kHz.
  */
  TCCR1A |= (1 << COM1B1) | (1 << COM1A1) | (1 << WGM10); 
 4ea:	e0 e8       	ldi	r30, 0x80	; 128
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	81 6a       	ori	r24, 0xA1	; 161
 4f2:	80 83       	st	Z, r24
  TCCR1B |= (1 << CS10) | (1 << WGM12);
 4f4:	e1 e8       	ldi	r30, 0x81	; 129
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	89 60       	ori	r24, 0x09	; 9
 4fc:	80 83       	st	Z, r24
 4fe:	08 95       	ret

Disassembly of section .text.ReadAdc:

0000049c <ReadAdc>:
}

int ReadAdc(int channel)
{
  ADMUX &= (0xF0);	
 49c:	ec e7       	ldi	r30, 0x7C	; 124
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	90 81       	ld	r25, Z
 4a2:	90 7f       	andi	r25, 0xF0	; 240
 4a4:	90 83       	st	Z, r25
  ADMUX |= (channel); // Read the value of the channel
 4a6:	90 81       	ld	r25, Z
 4a8:	89 2b       	or	r24, r25
 4aa:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADSC);  // Start the conversion
 4ac:	ea e7       	ldi	r30, 0x7A	; 122
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	80 83       	st	Z, r24
  while(ADCSRA & (1 << ADSC));  // Wait the flag of finish conversion
 4b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 4ba:	86 fd       	sbrc	r24, 6
 4bc:	fc cf       	rjmp	.-8      	; 0x4b6 <ReadAdc+0x1a>
  return ADC; // Return the value of ADC
 4be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 4c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 4c6:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
int ReadAdc(int channel);

int main (void) 
{

  ConfigGPIO();
  80:	0e 94 92 02 	call	0x524	; 0x524 <ConfigGPIO>
  ConfigADC();
  84:	0e 94 8b 02 	call	0x516	; 0x516 <ConfigADC>
  ConfigPWM();
  88:	0e 94 75 02 	call	0x4ea	; 0x4ea <ConfigPWM>
  //Serial.begin(115200);
  OCR1A = 239;
  8c:	e8 e8       	ldi	r30, 0x88	; 136
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ee       	ldi	r24, 0xEF	; 239
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	91 83       	std	Z+1, r25	; 0x01
  96:	80 83       	st	Z, r24
  
	uint8_t pwmBoost = MAXIMUM_PWM;
	uint8_t pwmBuck = MAXIMUM_PWM;
	OCR1A = MAXIMUM_PWM;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	91 83       	std	Z+1, r25	; 0x01
  9e:	80 83       	st	Z, r24
	OCR1B = MAXIMUM_PWM;
  a0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  a4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	float voltage12V = 0;
	float voltage3dot7V = 0;
	uint8_t flagLowVoltage = 0;
	uint8_t estado = 0;
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  ConfigPWM();
  //Serial.begin(115200);
  OCR1A = 239;
  
	uint8_t pwmBoost = MAXIMUM_PWM;
	uint8_t pwmBuck = MAXIMUM_PWM;
  aa:	df ef       	ldi	r29, 0xFF	; 255
  ConfigADC();
  ConfigPWM();
  //Serial.begin(115200);
  OCR1A = 239;
  
	uint8_t pwmBoost = MAXIMUM_PWM;
  ac:	1f ef       	ldi	r17, 0xFF	; 255
	uint8_t estado = 0;
	float outputVoltage = 0;
	int outputVoltageBuck = 0;
	for(;;) 
	{
		voltage12V = ReadAdc(INPUT_VOLTAGE) * FACTOR_VOLTAGE;
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 4e 02 	call	0x49c	; 0x49c <ReadAdc>
  b6:	bc 01       	movw	r22, r24
  b8:	99 0f       	add	r25, r25
  ba:	88 0b       	sbc	r24, r24
  bc:	99 0b       	sbc	r25, r25
  be:	0e 94 9e 01 	call	0x33c	; 0x33c <__floatsisf>
  c2:	2a ec       	ldi	r18, 0xCA	; 202
  c4:	34 e5       	ldi	r19, 0x54	; 84
  c6:	41 e4       	ldi	r20, 0x41	; 65
  c8:	5c e3       	ldi	r21, 0x3C	; 60
  ca:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
  ce:	6b 01       	movw	r12, r22
  d0:	7c 01       	movw	r14, r24
		switch(estado)
  d2:	c1 30       	cpi	r28, 0x01	; 1
  d4:	39 f1       	breq	.+78     	; 0x124 <main+0xa4>
  d6:	20 f0       	brcs	.+8      	; 0xe0 <main+0x60>
  d8:	c2 30       	cpi	r28, 0x02	; 2
  da:	09 f4       	brne	.+2      	; 0xde <main+0x5e>
  dc:	88 c0       	rjmp	.+272    	; 0x1ee <main+0x16e>
  de:	e7 cf       	rjmp	.-50     	; 0xae <main+0x2e>
		{
			case 0:
			
				if(voltage12V < 7)
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	40 ee       	ldi	r20, 0xE0	; 224
  e6:	50 e4       	ldi	r21, 0x40	; 64
  e8:	0e 94 bb 02 	call	0x576	; 0x576 <__cmpsf2>
  ec:	88 23       	and	r24, r24
  ee:	44 f4       	brge	.+16     	; 0x100 <main+0x80>
				{
					estado = 1;
					OCR1A = MAXIMUM_PWM;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		{
			case 0:
			
				if(voltage12V < 7)
				{
					estado = 1;
  fc:	c1 e0       	ldi	r28, 0x01	; 1
  fe:	d7 cf       	rjmp	.-82     	; 0xae <main+0x2e>
					OCR1A = MAXIMUM_PWM;
				}
				else if(voltage12V > 7.3)
 100:	2a e9       	ldi	r18, 0x9A	; 154
 102:	39 e9       	ldi	r19, 0x99	; 153
 104:	49 ee       	ldi	r20, 0xE9	; 233
 106:	50 e4       	ldi	r21, 0x40	; 64
 108:	c7 01       	movw	r24, r14
 10a:	b6 01       	movw	r22, r12
 10c:	0e 94 c0 02 	call	0x580	; 0x580 <__gesf2>
 110:	18 16       	cp	r1, r24
 112:	6c f6       	brge	.-102    	; 0xae <main+0x2e>
				{
					estado = 2;
					OCR1B = MAXIMUM_PWM;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
					estado = 1;
					OCR1A = MAXIMUM_PWM;
				}
				else if(voltage12V > 7.3)
				{
					estado = 2;
 120:	c2 e0       	ldi	r28, 0x02	; 2
 122:	c5 cf       	rjmp	.-118    	; 0xae <main+0x2e>
				
			break;

			case 1:
			
				PORTD &= ~(1 << PD2);
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	8b b9       	out	0x0b, r24	; 11
				voltage3dot7V = ReadAdc(BATTERY_VOLTAGE) * FACTOR_VOLTAGE;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 4e 02 	call	0x49c	; 0x49c <ReadAdc>
 132:	bc 01       	movw	r22, r24
 134:	99 0f       	add	r25, r25
 136:	88 0b       	sbc	r24, r24
 138:	99 0b       	sbc	r25, r25
 13a:	0e 94 9e 01 	call	0x33c	; 0x33c <__floatsisf>
 13e:	2a ec       	ldi	r18, 0xCA	; 202
 140:	34 e5       	ldi	r19, 0x54	; 84
 142:	41 e4       	ldi	r20, 0x41	; 65
 144:	5c e3       	ldi	r21, 0x3C	; 60
 146:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
				if(voltage3dot7V > 3.2)
 14a:	2d ec       	ldi	r18, 0xCD	; 205
 14c:	3c ec       	ldi	r19, 0xCC	; 204
 14e:	4c e4       	ldi	r20, 0x4C	; 76
 150:	50 e4       	ldi	r21, 0x40	; 64
 152:	0e 94 c0 02 	call	0x580	; 0x580 <__gesf2>
 156:	18 16       	cp	r1, r24
 158:	8c f5       	brge	.+98     	; 0x1bc <main+0x13c>
				{
					outputVoltage = ReadAdc(OUTPUT_VOLTAGE) * FACTOR_VOLTAGE;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 4e 02 	call	0x49c	; 0x49c <ReadAdc>
 162:	bc 01       	movw	r22, r24
 164:	99 0f       	add	r25, r25
 166:	88 0b       	sbc	r24, r24
 168:	99 0b       	sbc	r25, r25
 16a:	0e 94 9e 01 	call	0x33c	; 0x33c <__floatsisf>
 16e:	2a ec       	ldi	r18, 0xCA	; 202
 170:	34 e5       	ldi	r19, 0x54	; 84
 172:	41 e4       	ldi	r20, 0x41	; 65
 174:	5c e3       	ldi	r21, 0x3C	; 60
 176:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
 17a:	4b 01       	movw	r8, r22
 17c:	5c 01       	movw	r10, r24
					if((outputVoltage > 5) && pwmBoost < 255)
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 ea       	ldi	r20, 0xA0	; 160
 184:	50 e4       	ldi	r21, 0x40	; 64
 186:	0e 94 c0 02 	call	0x580	; 0x580 <__gesf2>
 18a:	18 16       	cp	r1, r24
 18c:	24 f4       	brge	.+8      	; 0x196 <main+0x116>
 18e:	1f 3f       	cpi	r17, 0xFF	; 255
 190:	11 f0       	breq	.+4      	; 0x196 <main+0x116>
					{
						pwmBoost++;
 192:	1f 5f       	subi	r17, 0xFF	; 255
 194:	0c c0       	rjmp	.+24     	; 0x1ae <main+0x12e>
					}
					else if((outputVoltage < 5) && pwmBoost > 0)
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 ea       	ldi	r20, 0xA0	; 160
 19c:	50 e4       	ldi	r21, 0x40	; 64
 19e:	c5 01       	movw	r24, r10
 1a0:	b4 01       	movw	r22, r8
 1a2:	0e 94 bb 02 	call	0x576	; 0x576 <__cmpsf2>
 1a6:	88 23       	and	r24, r24
 1a8:	14 f4       	brge	.+4      	; 0x1ae <main+0x12e>
 1aa:	11 11       	cpse	r17, r1
					{
						pwmBoost--;
 1ac:	11 50       	subi	r17, 0x01	; 1
					}
					OCR1B = pwmBoost;
 1ae:	81 2f       	mov	r24, r17
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <main+0x148>
				}
				else
				{
					OCR1B = MAXIMUM_PWM;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1c4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				}

				if(voltage12V > 7.3)
 1c8:	2a e9       	ldi	r18, 0x9A	; 154
 1ca:	39 e9       	ldi	r19, 0x99	; 153
 1cc:	49 ee       	ldi	r20, 0xE9	; 233
 1ce:	50 e4       	ldi	r21, 0x40	; 64
 1d0:	c7 01       	movw	r24, r14
 1d2:	b6 01       	movw	r22, r12
 1d4:	0e 94 c0 02 	call	0x580	; 0x580 <__gesf2>
 1d8:	18 16       	cp	r1, r24
 1da:	0c f0       	brlt	.+2      	; 0x1de <main+0x15e>
 1dc:	68 cf       	rjmp	.-304    	; 0xae <main+0x2e>
				{
					estado = 2;
					OCR1B = MAXIMUM_PWM;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1e6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
					OCR1B = MAXIMUM_PWM;
				}

				if(voltage12V > 7.3)
				{
					estado = 2;
 1ea:	c2 e0       	ldi	r28, 0x02	; 2
 1ec:	60 cf       	rjmp	.-320    	; 0xae <main+0x2e>

			break;

			case 2:
				
				PORTD |= (1 << PD2);
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	8b b9       	out	0x0b, r24	; 11
				outputVoltageBuck = ReadAdc(OUTPUT_VOLTAGE) * FACTOR_VOLTAGE;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 4e 02 	call	0x49c	; 0x49c <ReadAdc>
 1fc:	bc 01       	movw	r22, r24
 1fe:	99 0f       	add	r25, r25
 200:	88 0b       	sbc	r24, r24
 202:	99 0b       	sbc	r25, r25
 204:	0e 94 9e 01 	call	0x33c	; 0x33c <__floatsisf>
 208:	2a ec       	ldi	r18, 0xCA	; 202
 20a:	34 e5       	ldi	r19, 0x54	; 84
 20c:	41 e4       	ldi	r20, 0x41	; 65
 20e:	5c e3       	ldi	r21, 0x3C	; 60
 210:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
 214:	0e 94 99 02 	call	0x532	; 0x532 <__fixsfsi>
				if((outputVoltageBuck > 5) && pwmBuck > 0)
 218:	66 30       	cpi	r22, 0x06	; 6
 21a:	71 05       	cpc	r23, r1
 21c:	24 f0       	brlt	.+8      	; 0x226 <main+0x1a6>
 21e:	dd 23       	and	r29, r29
 220:	11 f0       	breq	.+4      	; 0x226 <main+0x1a6>
				{
					pwmBuck--;
 222:	d1 50       	subi	r29, 0x01	; 1
 224:	06 c0       	rjmp	.+12     	; 0x232 <main+0x1b2>
				}
				else if((outputVoltageBuck < 5) && pwmBuck < 255)
 226:	65 30       	cpi	r22, 0x05	; 5
 228:	71 05       	cpc	r23, r1
 22a:	1c f4       	brge	.+6      	; 0x232 <main+0x1b2>
 22c:	df 3f       	cpi	r29, 0xFF	; 255
 22e:	09 f0       	breq	.+2      	; 0x232 <main+0x1b2>
				{
					pwmBuck++;
 230:	df 5f       	subi	r29, 0xFF	; 255
				}
				OCR1A = pwmBuck;
 232:	8d 2f       	mov	r24, r29
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 23a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				if(voltage12V < 7)
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 ee       	ldi	r20, 0xE0	; 224
 244:	50 e4       	ldi	r21, 0x40	; 64
 246:	c7 01       	movw	r24, r14
 248:	b6 01       	movw	r22, r12
 24a:	0e 94 bb 02 	call	0x576	; 0x576 <__cmpsf2>
 24e:	88 23       	and	r24, r24
 250:	0c f0       	brlt	.+2      	; 0x254 <main+0x1d4>
 252:	2d cf       	rjmp	.-422    	; 0xae <main+0x2e>
				{
					estado = 1;
					OCR1A = MAXIMUM_PWM;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 25c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					pwmBuck++;
				}
				OCR1A = pwmBuck;
				if(voltage12V < 7)
				{
					estado = 1;
 260:	c1 e0       	ldi	r28, 0x01	; 1
 262:	25 cf       	rjmp	.-438    	; 0xae <main+0x2e>

Disassembly of section .text:

00000576 <__cmpsf2>:
 576:	0e 94 08 02 	call	0x410	; 0x410 <__fp_cmp>
 57a:	08 f4       	brcc	.+2      	; 0x57e <__cmpsf2+0x8>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	08 95       	ret

Disassembly of section .text:

00000532 <__fixsfsi>:
 532:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixunssfsi>
 536:	68 94       	set
 538:	b1 11       	cpse	r27, r1
 53a:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_szero>
 53e:	08 95       	ret

Disassembly of section .text:

000003b2 <__fixunssfsi>:
 3b2:	0e 94 34 02 	call	0x468	; 0x468 <__fp_splitA>
 3b6:	88 f0       	brcs	.+34     	; 0x3da <__fixunssfsi+0x28>
 3b8:	9f 57       	subi	r25, 0x7F	; 127
 3ba:	98 f0       	brcs	.+38     	; 0x3e2 <__fixunssfsi+0x30>
 3bc:	b9 2f       	mov	r27, r25
 3be:	99 27       	eor	r25, r25
 3c0:	b7 51       	subi	r27, 0x17	; 23
 3c2:	b0 f0       	brcs	.+44     	; 0x3f0 <__fixunssfsi+0x3e>
 3c4:	e1 f0       	breq	.+56     	; 0x3fe <__fixunssfsi+0x4c>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	88 1f       	adc	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	1a f0       	brmi	.+6      	; 0x3d6 <__fixunssfsi+0x24>
 3d0:	ba 95       	dec	r27
 3d2:	c9 f7       	brne	.-14     	; 0x3c6 <__fixunssfsi+0x14>
 3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__fixunssfsi+0x4c>
 3d6:	b1 30       	cpi	r27, 0x01	; 1
 3d8:	91 f0       	breq	.+36     	; 0x3fe <__fixunssfsi+0x4c>
 3da:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_zero>
 3de:	b1 e0       	ldi	r27, 0x01	; 1
 3e0:	08 95       	ret
 3e2:	0c 94 a0 02 	jmp	0x540	; 0x540 <__fp_zero>
 3e6:	67 2f       	mov	r22, r23
 3e8:	78 2f       	mov	r23, r24
 3ea:	88 27       	eor	r24, r24
 3ec:	b8 5f       	subi	r27, 0xF8	; 248
 3ee:	39 f0       	breq	.+14     	; 0x3fe <__fixunssfsi+0x4c>
 3f0:	b9 3f       	cpi	r27, 0xF9	; 249
 3f2:	cc f3       	brlt	.-14     	; 0x3e6 <__fixunssfsi+0x34>
 3f4:	86 95       	lsr	r24
 3f6:	77 95       	ror	r23
 3f8:	67 95       	ror	r22
 3fa:	b3 95       	inc	r27
 3fc:	d9 f7       	brne	.-10     	; 0x3f4 <__fixunssfsi+0x42>
 3fe:	3e f4       	brtc	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	90 95       	com	r25
 402:	80 95       	com	r24
 404:	70 95       	com	r23
 406:	61 95       	neg	r22
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

Disassembly of section .text:

00000338 <__floatunsisf>:
 338:	e8 94       	clt
 33a:	09 c0       	rjmp	.+18     	; 0x34e <__floatsisf+0x12>

0000033c <__floatsisf>:
 33c:	97 fb       	bst	r25, 7
 33e:	3e f4       	brtc	.+14     	; 0x34e <__floatsisf+0x12>
 340:	90 95       	com	r25
 342:	80 95       	com	r24
 344:	70 95       	com	r23
 346:	61 95       	neg	r22
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	8f 4f       	sbci	r24, 0xFF	; 255
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	99 23       	and	r25, r25
 350:	a9 f0       	breq	.+42     	; 0x37c <__floatsisf+0x40>
 352:	f9 2f       	mov	r31, r25
 354:	96 e9       	ldi	r25, 0x96	; 150
 356:	bb 27       	eor	r27, r27
 358:	93 95       	inc	r25
 35a:	f6 95       	lsr	r31
 35c:	87 95       	ror	r24
 35e:	77 95       	ror	r23
 360:	67 95       	ror	r22
 362:	b7 95       	ror	r27
 364:	f1 11       	cpse	r31, r1
 366:	f8 cf       	rjmp	.-16     	; 0x358 <__floatsisf+0x1c>
 368:	fa f4       	brpl	.+62     	; 0x3a8 <__floatsisf+0x6c>
 36a:	bb 0f       	add	r27, r27
 36c:	11 f4       	brne	.+4      	; 0x372 <__floatsisf+0x36>
 36e:	60 ff       	sbrs	r22, 0
 370:	1b c0       	rjmp	.+54     	; 0x3a8 <__floatsisf+0x6c>
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	8f 4f       	sbci	r24, 0xFF	; 255
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <__floatsisf+0x6c>
 37c:	88 23       	and	r24, r24
 37e:	11 f0       	breq	.+4      	; 0x384 <__floatsisf+0x48>
 380:	96 e9       	ldi	r25, 0x96	; 150
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <__floatsisf+0x6a>
 384:	77 23       	and	r23, r23
 386:	21 f0       	breq	.+8      	; 0x390 <__floatsisf+0x54>
 388:	9e e8       	ldi	r25, 0x8E	; 142
 38a:	87 2f       	mov	r24, r23
 38c:	76 2f       	mov	r23, r22
 38e:	05 c0       	rjmp	.+10     	; 0x39a <__floatsisf+0x5e>
 390:	66 23       	and	r22, r22
 392:	71 f0       	breq	.+28     	; 0x3b0 <__floatsisf+0x74>
 394:	96 e8       	ldi	r25, 0x86	; 134
 396:	86 2f       	mov	r24, r22
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	2a f0       	brmi	.+10     	; 0x3a8 <__floatsisf+0x6c>
 39e:	9a 95       	dec	r25
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	da f7       	brpl	.-10     	; 0x39e <__floatsisf+0x62>
 3a8:	88 0f       	add	r24, r24
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	97 f9       	bld	r25, 7
 3b0:	08 95       	ret

Disassembly of section .text:

00000410 <__fp_cmp>:
 410:	99 0f       	add	r25, r25
 412:	00 08       	sbc	r0, r0
 414:	55 0f       	add	r21, r21
 416:	aa 0b       	sbc	r26, r26
 418:	e0 e8       	ldi	r30, 0x80	; 128
 41a:	fe ef       	ldi	r31, 0xFE	; 254
 41c:	16 16       	cp	r1, r22
 41e:	17 06       	cpc	r1, r23
 420:	e8 07       	cpc	r30, r24
 422:	f9 07       	cpc	r31, r25
 424:	c0 f0       	brcs	.+48     	; 0x456 <__fp_cmp+0x46>
 426:	12 16       	cp	r1, r18
 428:	13 06       	cpc	r1, r19
 42a:	e4 07       	cpc	r30, r20
 42c:	f5 07       	cpc	r31, r21
 42e:	98 f0       	brcs	.+38     	; 0x456 <__fp_cmp+0x46>
 430:	62 1b       	sub	r22, r18
 432:	73 0b       	sbc	r23, r19
 434:	84 0b       	sbc	r24, r20
 436:	95 0b       	sbc	r25, r21
 438:	39 f4       	brne	.+14     	; 0x448 <__fp_cmp+0x38>
 43a:	0a 26       	eor	r0, r26
 43c:	61 f0       	breq	.+24     	; 0x456 <__fp_cmp+0x46>
 43e:	23 2b       	or	r18, r19
 440:	24 2b       	or	r18, r20
 442:	25 2b       	or	r18, r21
 444:	21 f4       	brne	.+8      	; 0x44e <__fp_cmp+0x3e>
 446:	08 95       	ret
 448:	0a 26       	eor	r0, r26
 44a:	09 f4       	brne	.+2      	; 0x44e <__fp_cmp+0x3e>
 44c:	a1 40       	sbci	r26, 0x01	; 1
 44e:	a6 95       	lsr	r26
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	81 1d       	adc	r24, r1
 454:	81 1d       	adc	r24, r1
 456:	08 95       	ret

Disassembly of section .text:

00000458 <__fp_split3>:
 458:	57 fd       	sbrc	r21, 7
 45a:	90 58       	subi	r25, 0x80	; 128
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	59 f0       	breq	.+22     	; 0x478 <__fp_splitA+0x10>
 462:	5f 3f       	cpi	r21, 0xFF	; 255
 464:	71 f0       	breq	.+28     	; 0x482 <__fp_splitA+0x1a>
 466:	47 95       	ror	r20

00000468 <__fp_splitA>:
 468:	88 0f       	add	r24, r24
 46a:	97 fb       	bst	r25, 7
 46c:	99 1f       	adc	r25, r25
 46e:	61 f0       	breq	.+24     	; 0x488 <__fp_splitA+0x20>
 470:	9f 3f       	cpi	r25, 0xFF	; 255
 472:	79 f0       	breq	.+30     	; 0x492 <__fp_splitA+0x2a>
 474:	87 95       	ror	r24
 476:	08 95       	ret
 478:	12 16       	cp	r1, r18
 47a:	13 06       	cpc	r1, r19
 47c:	14 06       	cpc	r1, r20
 47e:	55 1f       	adc	r21, r21
 480:	f2 cf       	rjmp	.-28     	; 0x466 <__fp_split3+0xe>
 482:	46 95       	lsr	r20
 484:	f1 df       	rcall	.-30     	; 0x468 <__fp_splitA>
 486:	08 c0       	rjmp	.+16     	; 0x498 <__fp_splitA+0x30>
 488:	16 16       	cp	r1, r22
 48a:	17 06       	cpc	r1, r23
 48c:	18 06       	cpc	r1, r24
 48e:	99 1f       	adc	r25, r25
 490:	f1 cf       	rjmp	.-30     	; 0x474 <__fp_splitA+0xc>
 492:	86 95       	lsr	r24
 494:	71 05       	cpc	r23, r1
 496:	61 05       	cpc	r22, r1
 498:	08 94       	sec
 49a:	08 95       	ret

Disassembly of section .text:

00000540 <__fp_zero>:
 540:	e8 94       	clt

00000542 <__fp_szero>:
 542:	bb 27       	eor	r27, r27
 544:	66 27       	eor	r22, r22
 546:	77 27       	eor	r23, r23
 548:	cb 01       	movw	r24, r22
 54a:	97 f9       	bld	r25, 7
 54c:	08 95       	ret

Disassembly of section .text:

00000580 <__gesf2>:
 580:	0e 94 08 02 	call	0x410	; 0x410 <__fp_cmp>
 584:	08 f4       	brcc	.+2      	; 0x588 <__gesf2+0x8>
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	08 95       	ret

Disassembly of section .text:

0000058a <__mulsf3>:
 58a:	0e 94 32 01 	call	0x264	; 0x264 <__mulsf3x>
 58e:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_round>

Disassembly of section .text:

00000264 <__mulsf3x>:
 264:	0f c0       	rjmp	.+30     	; 0x284 <__mulsf3x+0x20>
 266:	0e 94 a7 02 	call	0x54e	; 0x54e <__fp_pscA>
 26a:	38 f0       	brcs	.+14     	; 0x27a <__mulsf3x+0x16>
 26c:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_pscB>
 270:	20 f0       	brcs	.+8      	; 0x27a <__mulsf3x+0x16>
 272:	95 23       	and	r25, r21
 274:	11 f0       	breq	.+4      	; 0x27a <__mulsf3x+0x16>
 276:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_inf>
 27a:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_nan>
 27e:	11 24       	eor	r1, r1
 280:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_szero>
 284:	0e 94 2c 02 	call	0x458	; 0x458 <__fp_split3>
 288:	70 f3       	brcs	.-36     	; 0x266 <__mulsf3x+0x2>

0000028a <__mulsf3_pse>:
 28a:	95 9f       	mul	r25, r21
 28c:	c1 f3       	breq	.-16     	; 0x27e <__mulsf3x+0x1a>
 28e:	95 0f       	add	r25, r21
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	55 1f       	adc	r21, r21
 294:	62 9f       	mul	r22, r18
 296:	f0 01       	movw	r30, r0
 298:	72 9f       	mul	r23, r18
 29a:	bb 27       	eor	r27, r27
 29c:	f0 0d       	add	r31, r0
 29e:	b1 1d       	adc	r27, r1
 2a0:	63 9f       	mul	r22, r19
 2a2:	aa 27       	eor	r26, r26
 2a4:	f0 0d       	add	r31, r0
 2a6:	b1 1d       	adc	r27, r1
 2a8:	aa 1f       	adc	r26, r26
 2aa:	64 9f       	mul	r22, r20
 2ac:	66 27       	eor	r22, r22
 2ae:	b0 0d       	add	r27, r0
 2b0:	a1 1d       	adc	r26, r1
 2b2:	66 1f       	adc	r22, r22
 2b4:	82 9f       	mul	r24, r18
 2b6:	22 27       	eor	r18, r18
 2b8:	b0 0d       	add	r27, r0
 2ba:	a1 1d       	adc	r26, r1
 2bc:	62 1f       	adc	r22, r18
 2be:	73 9f       	mul	r23, r19
 2c0:	b0 0d       	add	r27, r0
 2c2:	a1 1d       	adc	r26, r1
 2c4:	62 1f       	adc	r22, r18
 2c6:	83 9f       	mul	r24, r19
 2c8:	a0 0d       	add	r26, r0
 2ca:	61 1d       	adc	r22, r1
 2cc:	22 1f       	adc	r18, r18
 2ce:	74 9f       	mul	r23, r20
 2d0:	33 27       	eor	r19, r19
 2d2:	a0 0d       	add	r26, r0
 2d4:	61 1d       	adc	r22, r1
 2d6:	23 1f       	adc	r18, r19
 2d8:	84 9f       	mul	r24, r20
 2da:	60 0d       	add	r22, r0
 2dc:	21 1d       	adc	r18, r1
 2de:	82 2f       	mov	r24, r18
 2e0:	76 2f       	mov	r23, r22
 2e2:	6a 2f       	mov	r22, r26
 2e4:	11 24       	eor	r1, r1
 2e6:	9f 57       	subi	r25, 0x7F	; 127
 2e8:	50 40       	sbci	r21, 0x00	; 0
 2ea:	9a f0       	brmi	.+38     	; 0x312 <__mulsf3_pse+0x88>
 2ec:	f1 f0       	breq	.+60     	; 0x32a <__mulsf3_pse+0xa0>
 2ee:	88 23       	and	r24, r24
 2f0:	4a f0       	brmi	.+18     	; 0x304 <__mulsf3_pse+0x7a>
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	bb 1f       	adc	r27, r27
 2f8:	66 1f       	adc	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	88 1f       	adc	r24, r24
 2fe:	91 50       	subi	r25, 0x01	; 1
 300:	50 40       	sbci	r21, 0x00	; 0
 302:	a9 f7       	brne	.-22     	; 0x2ee <__mulsf3_pse+0x64>
 304:	9e 3f       	cpi	r25, 0xFE	; 254
 306:	51 05       	cpc	r21, r1
 308:	80 f0       	brcs	.+32     	; 0x32a <__mulsf3_pse+0xa0>
 30a:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_inf>
 30e:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_szero>
 312:	5f 3f       	cpi	r21, 0xFF	; 255
 314:	e4 f3       	brlt	.-8      	; 0x30e <__mulsf3_pse+0x84>
 316:	98 3e       	cpi	r25, 0xE8	; 232
 318:	d4 f3       	brlt	.-12     	; 0x30e <__mulsf3_pse+0x84>
 31a:	86 95       	lsr	r24
 31c:	77 95       	ror	r23
 31e:	67 95       	ror	r22
 320:	b7 95       	ror	r27
 322:	f7 95       	ror	r31
 324:	e7 95       	ror	r30
 326:	9f 5f       	subi	r25, 0xFF	; 255
 328:	c1 f7       	brne	.-16     	; 0x31a <__mulsf3_pse+0x90>
 32a:	fe 2b       	or	r31, r30
 32c:	88 0f       	add	r24, r24
 32e:	91 1d       	adc	r25, r1
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	97 f9       	bld	r25, 7
 336:	08 95       	ret

Disassembly of section .text:

0000056a <__fp_inf>:
 56a:	97 f9       	bld	r25, 7
 56c:	9f 67       	ori	r25, 0x7F	; 127
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	08 95       	ret

Disassembly of section .text:

00000592 <__fp_nan>:
 592:	9f ef       	ldi	r25, 0xFF	; 255
 594:	80 ec       	ldi	r24, 0xC0	; 192
 596:	08 95       	ret

Disassembly of section .text:

0000054e <__fp_pscA>:
 54e:	00 24       	eor	r0, r0
 550:	0a 94       	dec	r0
 552:	16 16       	cp	r1, r22
 554:	17 06       	cpc	r1, r23
 556:	18 06       	cpc	r1, r24
 558:	09 06       	cpc	r0, r25
 55a:	08 95       	ret

Disassembly of section .text:

0000055c <__fp_pscB>:
 55c:	00 24       	eor	r0, r0
 55e:	0a 94       	dec	r0
 560:	12 16       	cp	r1, r18
 562:	13 06       	cpc	r1, r19
 564:	14 06       	cpc	r1, r20
 566:	05 06       	cpc	r0, r21
 568:	08 95       	ret

Disassembly of section .text:

000004c8 <__fp_round>:
 4c8:	09 2e       	mov	r0, r25
 4ca:	03 94       	inc	r0
 4cc:	00 0c       	add	r0, r0
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__fp_round+0xc>
 4d0:	88 23       	and	r24, r24
 4d2:	52 f0       	brmi	.+20     	; 0x4e8 <__fp_round+0x20>
 4d4:	bb 0f       	add	r27, r27
 4d6:	40 f4       	brcc	.+16     	; 0x4e8 <__fp_round+0x20>
 4d8:	bf 2b       	or	r27, r31
 4da:	11 f4       	brne	.+4      	; 0x4e0 <__fp_round+0x18>
 4dc:	60 ff       	sbrs	r22, 0
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__fp_round+0x20>
 4e0:	6f 5f       	subi	r22, 0xFF	; 255
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000005a0 <_fini>:
 5a0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000005a2 <__funcs_on_exit>:
 5a2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000005a4 <__simulator_exit>:
 5a4:	08 95       	ret

Disassembly of section .text.exit:

00000500 <exit>:
 500:	ec 01       	movw	r28, r24
 502:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__funcs_on_exit>
 506:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_fini>
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__simulator_exit>
 510:	ce 01       	movw	r24, r28
 512:	0e 94 ce 02 	call	0x59c	; 0x59c <_Exit>

Disassembly of section .text._Exit:

0000059c <_Exit>:
 59c:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
