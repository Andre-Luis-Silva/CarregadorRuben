
ProjetoCarregadorRuben.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c60  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001d20  08001d20  00002d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d60  08001d60  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d60  08001d60  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d60  08001d60  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d60  08001d60  00002d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d64  08001d64  00002d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d68  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d74  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d74  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b1f  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e67  00000000  00000000  00005b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b8  00000000  00000000  000069c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a4  00000000  00000000  00006d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118d9  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005033  00000000  00000000  000188f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bd46  00000000  00000000  0001d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008966e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d30  00000000  00000000  000896b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0008a3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d08 	.word	0x08001d08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001d08 	.word	0x08001d08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 f9eb 	bl	800060c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f92b 	bl	800049c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f9dd 	bl	800060c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 f9d3 	bl	800060c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 f955 	bl	8000524 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 f94b 	bl	8000524 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8ab 	bl	8000400 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f82b 	bl	8000310 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f89d 	bl	8000400 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f893 	bl	8000400 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			@ (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f839 	bl	8000360 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f82f 	bl	8000360 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)

08000310 <__eqsf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	024e      	lsls	r6, r1, #9
 8000316:	004c      	lsls	r4, r1, #1
 8000318:	0245      	lsls	r5, r0, #9
 800031a:	0a6d      	lsrs	r5, r5, #9
 800031c:	0e12      	lsrs	r2, r2, #24
 800031e:	0fc3      	lsrs	r3, r0, #31
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	2aff      	cmp	r2, #255	@ 0xff
 8000328:	d010      	beq.n	800034c <__eqsf2+0x3c>
 800032a:	2cff      	cmp	r4, #255	@ 0xff
 800032c:	d00c      	beq.n	8000348 <__eqsf2+0x38>
 800032e:	2001      	movs	r0, #1
 8000330:	42a2      	cmp	r2, r4
 8000332:	d10a      	bne.n	800034a <__eqsf2+0x3a>
 8000334:	42b5      	cmp	r5, r6
 8000336:	d108      	bne.n	800034a <__eqsf2+0x3a>
 8000338:	428b      	cmp	r3, r1
 800033a:	d00f      	beq.n	800035c <__eqsf2+0x4c>
 800033c:	2a00      	cmp	r2, #0
 800033e:	d104      	bne.n	800034a <__eqsf2+0x3a>
 8000340:	0028      	movs	r0, r5
 8000342:	1e43      	subs	r3, r0, #1
 8000344:	4198      	sbcs	r0, r3
 8000346:	e000      	b.n	800034a <__eqsf2+0x3a>
 8000348:	2001      	movs	r0, #1
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	2001      	movs	r0, #1
 800034e:	2cff      	cmp	r4, #255	@ 0xff
 8000350:	d1fb      	bne.n	800034a <__eqsf2+0x3a>
 8000352:	4335      	orrs	r5, r6
 8000354:	d1f9      	bne.n	800034a <__eqsf2+0x3a>
 8000356:	404b      	eors	r3, r1
 8000358:	0018      	movs	r0, r3
 800035a:	e7f6      	b.n	800034a <__eqsf2+0x3a>
 800035c:	2000      	movs	r0, #0
 800035e:	e7f4      	b.n	800034a <__eqsf2+0x3a>

08000360 <__gesf2>:
 8000360:	b530      	push	{r4, r5, lr}
 8000362:	0042      	lsls	r2, r0, #1
 8000364:	0244      	lsls	r4, r0, #9
 8000366:	024d      	lsls	r5, r1, #9
 8000368:	0fc3      	lsrs	r3, r0, #31
 800036a:	0048      	lsls	r0, r1, #1
 800036c:	0a64      	lsrs	r4, r4, #9
 800036e:	0e12      	lsrs	r2, r2, #24
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0e00      	lsrs	r0, r0, #24
 8000374:	0fc9      	lsrs	r1, r1, #31
 8000376:	2aff      	cmp	r2, #255	@ 0xff
 8000378:	d019      	beq.n	80003ae <__gesf2+0x4e>
 800037a:	28ff      	cmp	r0, #255	@ 0xff
 800037c:	d00b      	beq.n	8000396 <__gesf2+0x36>
 800037e:	2a00      	cmp	r2, #0
 8000380:	d11e      	bne.n	80003c0 <__gesf2+0x60>
 8000382:	2800      	cmp	r0, #0
 8000384:	d10b      	bne.n	800039e <__gesf2+0x3e>
 8000386:	2d00      	cmp	r5, #0
 8000388:	d027      	beq.n	80003da <__gesf2+0x7a>
 800038a:	2c00      	cmp	r4, #0
 800038c:	d134      	bne.n	80003f8 <__gesf2+0x98>
 800038e:	2900      	cmp	r1, #0
 8000390:	d02f      	beq.n	80003f2 <__gesf2+0x92>
 8000392:	0008      	movs	r0, r1
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	2d00      	cmp	r5, #0
 8000398:	d128      	bne.n	80003ec <__gesf2+0x8c>
 800039a:	2a00      	cmp	r2, #0
 800039c:	d101      	bne.n	80003a2 <__gesf2+0x42>
 800039e:	2c00      	cmp	r4, #0
 80003a0:	d0f5      	beq.n	800038e <__gesf2+0x2e>
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d107      	bne.n	80003b6 <__gesf2+0x56>
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d023      	beq.n	80003f2 <__gesf2+0x92>
 80003aa:	0018      	movs	r0, r3
 80003ac:	e7f2      	b.n	8000394 <__gesf2+0x34>
 80003ae:	2c00      	cmp	r4, #0
 80003b0:	d11c      	bne.n	80003ec <__gesf2+0x8c>
 80003b2:	28ff      	cmp	r0, #255	@ 0xff
 80003b4:	d014      	beq.n	80003e0 <__gesf2+0x80>
 80003b6:	1e58      	subs	r0, r3, #1
 80003b8:	2302      	movs	r3, #2
 80003ba:	4018      	ands	r0, r3
 80003bc:	3801      	subs	r0, #1
 80003be:	e7e9      	b.n	8000394 <__gesf2+0x34>
 80003c0:	2800      	cmp	r0, #0
 80003c2:	d0f8      	beq.n	80003b6 <__gesf2+0x56>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d1f6      	bne.n	80003b6 <__gesf2+0x56>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	dcf4      	bgt.n	80003b6 <__gesf2+0x56>
 80003cc:	dbeb      	blt.n	80003a6 <__gesf2+0x46>
 80003ce:	42ac      	cmp	r4, r5
 80003d0:	d8f1      	bhi.n	80003b6 <__gesf2+0x56>
 80003d2:	2000      	movs	r0, #0
 80003d4:	42ac      	cmp	r4, r5
 80003d6:	d2dd      	bcs.n	8000394 <__gesf2+0x34>
 80003d8:	e7e5      	b.n	80003a6 <__gesf2+0x46>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d0da      	beq.n	8000394 <__gesf2+0x34>
 80003de:	e7ea      	b.n	80003b6 <__gesf2+0x56>
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	d103      	bne.n	80003ec <__gesf2+0x8c>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d1e6      	bne.n	80003b6 <__gesf2+0x56>
 80003e8:	2000      	movs	r0, #0
 80003ea:	e7d3      	b.n	8000394 <__gesf2+0x34>
 80003ec:	2002      	movs	r0, #2
 80003ee:	4240      	negs	r0, r0
 80003f0:	e7d0      	b.n	8000394 <__gesf2+0x34>
 80003f2:	2001      	movs	r0, #1
 80003f4:	4240      	negs	r0, r0
 80003f6:	e7cd      	b.n	8000394 <__gesf2+0x34>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d0e8      	beq.n	80003ce <__gesf2+0x6e>
 80003fc:	e7db      	b.n	80003b6 <__gesf2+0x56>
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__lesf2>:
 8000400:	b530      	push	{r4, r5, lr}
 8000402:	0042      	lsls	r2, r0, #1
 8000404:	0244      	lsls	r4, r0, #9
 8000406:	024d      	lsls	r5, r1, #9
 8000408:	0fc3      	lsrs	r3, r0, #31
 800040a:	0048      	lsls	r0, r1, #1
 800040c:	0a64      	lsrs	r4, r4, #9
 800040e:	0e12      	lsrs	r2, r2, #24
 8000410:	0a6d      	lsrs	r5, r5, #9
 8000412:	0e00      	lsrs	r0, r0, #24
 8000414:	0fc9      	lsrs	r1, r1, #31
 8000416:	2aff      	cmp	r2, #255	@ 0xff
 8000418:	d01a      	beq.n	8000450 <__lesf2+0x50>
 800041a:	28ff      	cmp	r0, #255	@ 0xff
 800041c:	d00e      	beq.n	800043c <__lesf2+0x3c>
 800041e:	2a00      	cmp	r2, #0
 8000420:	d11e      	bne.n	8000460 <__lesf2+0x60>
 8000422:	2800      	cmp	r0, #0
 8000424:	d10e      	bne.n	8000444 <__lesf2+0x44>
 8000426:	2d00      	cmp	r5, #0
 8000428:	d02a      	beq.n	8000480 <__lesf2+0x80>
 800042a:	2c00      	cmp	r4, #0
 800042c:	d00c      	beq.n	8000448 <__lesf2+0x48>
 800042e:	428b      	cmp	r3, r1
 8000430:	d01d      	beq.n	800046e <__lesf2+0x6e>
 8000432:	1e58      	subs	r0, r3, #1
 8000434:	2302      	movs	r3, #2
 8000436:	4018      	ands	r0, r3
 8000438:	3801      	subs	r0, #1
 800043a:	e010      	b.n	800045e <__lesf2+0x5e>
 800043c:	2d00      	cmp	r5, #0
 800043e:	d10d      	bne.n	800045c <__lesf2+0x5c>
 8000440:	2a00      	cmp	r2, #0
 8000442:	d120      	bne.n	8000486 <__lesf2+0x86>
 8000444:	2c00      	cmp	r4, #0
 8000446:	d11e      	bne.n	8000486 <__lesf2+0x86>
 8000448:	2900      	cmp	r1, #0
 800044a:	d023      	beq.n	8000494 <__lesf2+0x94>
 800044c:	0008      	movs	r0, r1
 800044e:	e006      	b.n	800045e <__lesf2+0x5e>
 8000450:	2c00      	cmp	r4, #0
 8000452:	d103      	bne.n	800045c <__lesf2+0x5c>
 8000454:	28ff      	cmp	r0, #255	@ 0xff
 8000456:	d1ec      	bne.n	8000432 <__lesf2+0x32>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d017      	beq.n	800048c <__lesf2+0x8c>
 800045c:	2002      	movs	r0, #2
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	2800      	cmp	r0, #0
 8000462:	d0e6      	beq.n	8000432 <__lesf2+0x32>
 8000464:	428b      	cmp	r3, r1
 8000466:	d1e4      	bne.n	8000432 <__lesf2+0x32>
 8000468:	4282      	cmp	r2, r0
 800046a:	dce2      	bgt.n	8000432 <__lesf2+0x32>
 800046c:	db04      	blt.n	8000478 <__lesf2+0x78>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d8df      	bhi.n	8000432 <__lesf2+0x32>
 8000472:	2000      	movs	r0, #0
 8000474:	42ac      	cmp	r4, r5
 8000476:	d2f2      	bcs.n	800045e <__lesf2+0x5e>
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00b      	beq.n	8000494 <__lesf2+0x94>
 800047c:	0018      	movs	r0, r3
 800047e:	e7ee      	b.n	800045e <__lesf2+0x5e>
 8000480:	2c00      	cmp	r4, #0
 8000482:	d0ec      	beq.n	800045e <__lesf2+0x5e>
 8000484:	e7d5      	b.n	8000432 <__lesf2+0x32>
 8000486:	428b      	cmp	r3, r1
 8000488:	d1d3      	bne.n	8000432 <__lesf2+0x32>
 800048a:	e7f5      	b.n	8000478 <__lesf2+0x78>
 800048c:	2000      	movs	r0, #0
 800048e:	428b      	cmp	r3, r1
 8000490:	d0e5      	beq.n	800045e <__lesf2+0x5e>
 8000492:	e7ce      	b.n	8000432 <__lesf2+0x32>
 8000494:	2001      	movs	r0, #1
 8000496:	4240      	negs	r0, r0
 8000498:	e7e1      	b.n	800045e <__lesf2+0x5e>
 800049a:	46c0      	nop			@ (mov r8, r8)

0800049c <__eqdf2>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	4657      	mov	r7, sl
 80004a0:	46de      	mov	lr, fp
 80004a2:	464e      	mov	r6, r9
 80004a4:	4645      	mov	r5, r8
 80004a6:	b5e0      	push	{r5, r6, r7, lr}
 80004a8:	000d      	movs	r5, r1
 80004aa:	0004      	movs	r4, r0
 80004ac:	0fe8      	lsrs	r0, r5, #31
 80004ae:	4683      	mov	fp, r0
 80004b0:	0309      	lsls	r1, r1, #12
 80004b2:	0fd8      	lsrs	r0, r3, #31
 80004b4:	0b09      	lsrs	r1, r1, #12
 80004b6:	4682      	mov	sl, r0
 80004b8:	4819      	ldr	r0, [pc, #100]	@ (8000520 <__eqdf2+0x84>)
 80004ba:	468c      	mov	ip, r1
 80004bc:	031f      	lsls	r7, r3, #12
 80004be:	0069      	lsls	r1, r5, #1
 80004c0:	005e      	lsls	r6, r3, #1
 80004c2:	0d49      	lsrs	r1, r1, #21
 80004c4:	0b3f      	lsrs	r7, r7, #12
 80004c6:	0d76      	lsrs	r6, r6, #21
 80004c8:	4281      	cmp	r1, r0
 80004ca:	d018      	beq.n	80004fe <__eqdf2+0x62>
 80004cc:	4286      	cmp	r6, r0
 80004ce:	d00f      	beq.n	80004f0 <__eqdf2+0x54>
 80004d0:	2001      	movs	r0, #1
 80004d2:	42b1      	cmp	r1, r6
 80004d4:	d10d      	bne.n	80004f2 <__eqdf2+0x56>
 80004d6:	45bc      	cmp	ip, r7
 80004d8:	d10b      	bne.n	80004f2 <__eqdf2+0x56>
 80004da:	4294      	cmp	r4, r2
 80004dc:	d109      	bne.n	80004f2 <__eqdf2+0x56>
 80004de:	45d3      	cmp	fp, sl
 80004e0:	d01c      	beq.n	800051c <__eqdf2+0x80>
 80004e2:	2900      	cmp	r1, #0
 80004e4:	d105      	bne.n	80004f2 <__eqdf2+0x56>
 80004e6:	4660      	mov	r0, ip
 80004e8:	4320      	orrs	r0, r4
 80004ea:	1e43      	subs	r3, r0, #1
 80004ec:	4198      	sbcs	r0, r3
 80004ee:	e000      	b.n	80004f2 <__eqdf2+0x56>
 80004f0:	2001      	movs	r0, #1
 80004f2:	bcf0      	pop	{r4, r5, r6, r7}
 80004f4:	46bb      	mov	fp, r7
 80004f6:	46b2      	mov	sl, r6
 80004f8:	46a9      	mov	r9, r5
 80004fa:	46a0      	mov	r8, r4
 80004fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	428e      	cmp	r6, r1
 8000502:	d1f6      	bne.n	80004f2 <__eqdf2+0x56>
 8000504:	4661      	mov	r1, ip
 8000506:	4339      	orrs	r1, r7
 8000508:	000f      	movs	r7, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	4327      	orrs	r7, r4
 800050e:	d1f0      	bne.n	80004f2 <__eqdf2+0x56>
 8000510:	465b      	mov	r3, fp
 8000512:	4652      	mov	r2, sl
 8000514:	1a98      	subs	r0, r3, r2
 8000516:	1e43      	subs	r3, r0, #1
 8000518:	4198      	sbcs	r0, r3
 800051a:	e7ea      	b.n	80004f2 <__eqdf2+0x56>
 800051c:	2000      	movs	r0, #0
 800051e:	e7e8      	b.n	80004f2 <__eqdf2+0x56>
 8000520:	000007ff 	.word	0x000007ff

08000524 <__gedf2>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	4657      	mov	r7, sl
 8000528:	464e      	mov	r6, r9
 800052a:	4645      	mov	r5, r8
 800052c:	46de      	mov	lr, fp
 800052e:	b5e0      	push	{r5, r6, r7, lr}
 8000530:	000d      	movs	r5, r1
 8000532:	030f      	lsls	r7, r1, #12
 8000534:	0b39      	lsrs	r1, r7, #12
 8000536:	b083      	sub	sp, #12
 8000538:	0004      	movs	r4, r0
 800053a:	4680      	mov	r8, r0
 800053c:	9101      	str	r1, [sp, #4]
 800053e:	0058      	lsls	r0, r3, #1
 8000540:	0fe9      	lsrs	r1, r5, #31
 8000542:	4f31      	ldr	r7, [pc, #196]	@ (8000608 <__gedf2+0xe4>)
 8000544:	0d40      	lsrs	r0, r0, #21
 8000546:	468c      	mov	ip, r1
 8000548:	006e      	lsls	r6, r5, #1
 800054a:	0319      	lsls	r1, r3, #12
 800054c:	4682      	mov	sl, r0
 800054e:	4691      	mov	r9, r2
 8000550:	0d76      	lsrs	r6, r6, #21
 8000552:	0b09      	lsrs	r1, r1, #12
 8000554:	0fd8      	lsrs	r0, r3, #31
 8000556:	42be      	cmp	r6, r7
 8000558:	d01f      	beq.n	800059a <__gedf2+0x76>
 800055a:	45ba      	cmp	sl, r7
 800055c:	d00f      	beq.n	800057e <__gedf2+0x5a>
 800055e:	2e00      	cmp	r6, #0
 8000560:	d12f      	bne.n	80005c2 <__gedf2+0x9e>
 8000562:	4655      	mov	r5, sl
 8000564:	9e01      	ldr	r6, [sp, #4]
 8000566:	4334      	orrs	r4, r6
 8000568:	2d00      	cmp	r5, #0
 800056a:	d127      	bne.n	80005bc <__gedf2+0x98>
 800056c:	430a      	orrs	r2, r1
 800056e:	d03a      	beq.n	80005e6 <__gedf2+0xc2>
 8000570:	2c00      	cmp	r4, #0
 8000572:	d145      	bne.n	8000600 <__gedf2+0xdc>
 8000574:	2800      	cmp	r0, #0
 8000576:	d11a      	bne.n	80005ae <__gedf2+0x8a>
 8000578:	2001      	movs	r0, #1
 800057a:	4240      	negs	r0, r0
 800057c:	e017      	b.n	80005ae <__gedf2+0x8a>
 800057e:	4311      	orrs	r1, r2
 8000580:	d13b      	bne.n	80005fa <__gedf2+0xd6>
 8000582:	2e00      	cmp	r6, #0
 8000584:	d102      	bne.n	800058c <__gedf2+0x68>
 8000586:	9f01      	ldr	r7, [sp, #4]
 8000588:	4327      	orrs	r7, r4
 800058a:	d0f3      	beq.n	8000574 <__gedf2+0x50>
 800058c:	4584      	cmp	ip, r0
 800058e:	d109      	bne.n	80005a4 <__gedf2+0x80>
 8000590:	4663      	mov	r3, ip
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f0      	beq.n	8000578 <__gedf2+0x54>
 8000596:	4660      	mov	r0, ip
 8000598:	e009      	b.n	80005ae <__gedf2+0x8a>
 800059a:	9f01      	ldr	r7, [sp, #4]
 800059c:	4327      	orrs	r7, r4
 800059e:	d12c      	bne.n	80005fa <__gedf2+0xd6>
 80005a0:	45b2      	cmp	sl, r6
 80005a2:	d024      	beq.n	80005ee <__gedf2+0xca>
 80005a4:	4663      	mov	r3, ip
 80005a6:	2002      	movs	r0, #2
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4018      	ands	r0, r3
 80005ac:	3801      	subs	r0, #1
 80005ae:	b003      	add	sp, #12
 80005b0:	bcf0      	pop	{r4, r5, r6, r7}
 80005b2:	46bb      	mov	fp, r7
 80005b4:	46b2      	mov	sl, r6
 80005b6:	46a9      	mov	r9, r5
 80005b8:	46a0      	mov	r8, r4
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d0d9      	beq.n	8000574 <__gedf2+0x50>
 80005c0:	e7e4      	b.n	800058c <__gedf2+0x68>
 80005c2:	4654      	mov	r4, sl
 80005c4:	2c00      	cmp	r4, #0
 80005c6:	d0ed      	beq.n	80005a4 <__gedf2+0x80>
 80005c8:	4584      	cmp	ip, r0
 80005ca:	d1eb      	bne.n	80005a4 <__gedf2+0x80>
 80005cc:	4556      	cmp	r6, sl
 80005ce:	dce9      	bgt.n	80005a4 <__gedf2+0x80>
 80005d0:	dbde      	blt.n	8000590 <__gedf2+0x6c>
 80005d2:	9b01      	ldr	r3, [sp, #4]
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d8e5      	bhi.n	80005a4 <__gedf2+0x80>
 80005d8:	d1da      	bne.n	8000590 <__gedf2+0x6c>
 80005da:	45c8      	cmp	r8, r9
 80005dc:	d8e2      	bhi.n	80005a4 <__gedf2+0x80>
 80005de:	2000      	movs	r0, #0
 80005e0:	45c8      	cmp	r8, r9
 80005e2:	d2e4      	bcs.n	80005ae <__gedf2+0x8a>
 80005e4:	e7d4      	b.n	8000590 <__gedf2+0x6c>
 80005e6:	2000      	movs	r0, #0
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d0e0      	beq.n	80005ae <__gedf2+0x8a>
 80005ec:	e7da      	b.n	80005a4 <__gedf2+0x80>
 80005ee:	4311      	orrs	r1, r2
 80005f0:	d103      	bne.n	80005fa <__gedf2+0xd6>
 80005f2:	4584      	cmp	ip, r0
 80005f4:	d1d6      	bne.n	80005a4 <__gedf2+0x80>
 80005f6:	2000      	movs	r0, #0
 80005f8:	e7d9      	b.n	80005ae <__gedf2+0x8a>
 80005fa:	2002      	movs	r0, #2
 80005fc:	4240      	negs	r0, r0
 80005fe:	e7d6      	b.n	80005ae <__gedf2+0x8a>
 8000600:	4584      	cmp	ip, r0
 8000602:	d0e6      	beq.n	80005d2 <__gedf2+0xae>
 8000604:	e7ce      	b.n	80005a4 <__gedf2+0x80>
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	000007ff 	.word	0x000007ff

0800060c <__ledf2>:
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	4657      	mov	r7, sl
 8000610:	464e      	mov	r6, r9
 8000612:	4645      	mov	r5, r8
 8000614:	46de      	mov	lr, fp
 8000616:	b5e0      	push	{r5, r6, r7, lr}
 8000618:	000d      	movs	r5, r1
 800061a:	030f      	lsls	r7, r1, #12
 800061c:	0004      	movs	r4, r0
 800061e:	4680      	mov	r8, r0
 8000620:	0fe8      	lsrs	r0, r5, #31
 8000622:	0b39      	lsrs	r1, r7, #12
 8000624:	4684      	mov	ip, r0
 8000626:	b083      	sub	sp, #12
 8000628:	0058      	lsls	r0, r3, #1
 800062a:	4f30      	ldr	r7, [pc, #192]	@ (80006ec <__ledf2+0xe0>)
 800062c:	0d40      	lsrs	r0, r0, #21
 800062e:	9101      	str	r1, [sp, #4]
 8000630:	031e      	lsls	r6, r3, #12
 8000632:	0069      	lsls	r1, r5, #1
 8000634:	4682      	mov	sl, r0
 8000636:	4691      	mov	r9, r2
 8000638:	0d49      	lsrs	r1, r1, #21
 800063a:	0b36      	lsrs	r6, r6, #12
 800063c:	0fd8      	lsrs	r0, r3, #31
 800063e:	42b9      	cmp	r1, r7
 8000640:	d020      	beq.n	8000684 <__ledf2+0x78>
 8000642:	45ba      	cmp	sl, r7
 8000644:	d00f      	beq.n	8000666 <__ledf2+0x5a>
 8000646:	2900      	cmp	r1, #0
 8000648:	d12b      	bne.n	80006a2 <__ledf2+0x96>
 800064a:	9901      	ldr	r1, [sp, #4]
 800064c:	430c      	orrs	r4, r1
 800064e:	4651      	mov	r1, sl
 8000650:	2900      	cmp	r1, #0
 8000652:	d137      	bne.n	80006c4 <__ledf2+0xb8>
 8000654:	4332      	orrs	r2, r6
 8000656:	d038      	beq.n	80006ca <__ledf2+0xbe>
 8000658:	2c00      	cmp	r4, #0
 800065a:	d144      	bne.n	80006e6 <__ledf2+0xda>
 800065c:	2800      	cmp	r0, #0
 800065e:	d119      	bne.n	8000694 <__ledf2+0x88>
 8000660:	2001      	movs	r0, #1
 8000662:	4240      	negs	r0, r0
 8000664:	e016      	b.n	8000694 <__ledf2+0x88>
 8000666:	4316      	orrs	r6, r2
 8000668:	d113      	bne.n	8000692 <__ledf2+0x86>
 800066a:	2900      	cmp	r1, #0
 800066c:	d102      	bne.n	8000674 <__ledf2+0x68>
 800066e:	9f01      	ldr	r7, [sp, #4]
 8000670:	4327      	orrs	r7, r4
 8000672:	d0f3      	beq.n	800065c <__ledf2+0x50>
 8000674:	4584      	cmp	ip, r0
 8000676:	d020      	beq.n	80006ba <__ledf2+0xae>
 8000678:	4663      	mov	r3, ip
 800067a:	2002      	movs	r0, #2
 800067c:	3b01      	subs	r3, #1
 800067e:	4018      	ands	r0, r3
 8000680:	3801      	subs	r0, #1
 8000682:	e007      	b.n	8000694 <__ledf2+0x88>
 8000684:	9f01      	ldr	r7, [sp, #4]
 8000686:	4327      	orrs	r7, r4
 8000688:	d103      	bne.n	8000692 <__ledf2+0x86>
 800068a:	458a      	cmp	sl, r1
 800068c:	d1f4      	bne.n	8000678 <__ledf2+0x6c>
 800068e:	4316      	orrs	r6, r2
 8000690:	d01f      	beq.n	80006d2 <__ledf2+0xc6>
 8000692:	2002      	movs	r0, #2
 8000694:	b003      	add	sp, #12
 8000696:	bcf0      	pop	{r4, r5, r6, r7}
 8000698:	46bb      	mov	fp, r7
 800069a:	46b2      	mov	sl, r6
 800069c:	46a9      	mov	r9, r5
 800069e:	46a0      	mov	r8, r4
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	4654      	mov	r4, sl
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d0e7      	beq.n	8000678 <__ledf2+0x6c>
 80006a8:	4584      	cmp	ip, r0
 80006aa:	d1e5      	bne.n	8000678 <__ledf2+0x6c>
 80006ac:	4551      	cmp	r1, sl
 80006ae:	dce3      	bgt.n	8000678 <__ledf2+0x6c>
 80006b0:	db03      	blt.n	80006ba <__ledf2+0xae>
 80006b2:	9b01      	ldr	r3, [sp, #4]
 80006b4:	42b3      	cmp	r3, r6
 80006b6:	d8df      	bhi.n	8000678 <__ledf2+0x6c>
 80006b8:	d00f      	beq.n	80006da <__ledf2+0xce>
 80006ba:	4663      	mov	r3, ip
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0cf      	beq.n	8000660 <__ledf2+0x54>
 80006c0:	4660      	mov	r0, ip
 80006c2:	e7e7      	b.n	8000694 <__ledf2+0x88>
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d0c9      	beq.n	800065c <__ledf2+0x50>
 80006c8:	e7d4      	b.n	8000674 <__ledf2+0x68>
 80006ca:	2000      	movs	r0, #0
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d0e1      	beq.n	8000694 <__ledf2+0x88>
 80006d0:	e7d2      	b.n	8000678 <__ledf2+0x6c>
 80006d2:	4584      	cmp	ip, r0
 80006d4:	d1d0      	bne.n	8000678 <__ledf2+0x6c>
 80006d6:	2000      	movs	r0, #0
 80006d8:	e7dc      	b.n	8000694 <__ledf2+0x88>
 80006da:	45c8      	cmp	r8, r9
 80006dc:	d8cc      	bhi.n	8000678 <__ledf2+0x6c>
 80006de:	2000      	movs	r0, #0
 80006e0:	45c8      	cmp	r8, r9
 80006e2:	d2d7      	bcs.n	8000694 <__ledf2+0x88>
 80006e4:	e7e9      	b.n	80006ba <__ledf2+0xae>
 80006e6:	4584      	cmp	ip, r0
 80006e8:	d0e3      	beq.n	80006b2 <__ledf2+0xa6>
 80006ea:	e7c5      	b.n	8000678 <__ledf2+0x6c>
 80006ec:	000007ff 	.word	0x000007ff

080006f0 <__aeabi_dmul>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	4657      	mov	r7, sl
 80006f4:	46de      	mov	lr, fp
 80006f6:	464e      	mov	r6, r9
 80006f8:	4645      	mov	r5, r8
 80006fa:	b5e0      	push	{r5, r6, r7, lr}
 80006fc:	001f      	movs	r7, r3
 80006fe:	030b      	lsls	r3, r1, #12
 8000700:	0b1b      	lsrs	r3, r3, #12
 8000702:	0016      	movs	r6, r2
 8000704:	469a      	mov	sl, r3
 8000706:	0fca      	lsrs	r2, r1, #31
 8000708:	004b      	lsls	r3, r1, #1
 800070a:	0004      	movs	r4, r0
 800070c:	4693      	mov	fp, r2
 800070e:	b087      	sub	sp, #28
 8000710:	0d5b      	lsrs	r3, r3, #21
 8000712:	d100      	bne.n	8000716 <__aeabi_dmul+0x26>
 8000714:	e0d5      	b.n	80008c2 <__aeabi_dmul+0x1d2>
 8000716:	4abb      	ldr	r2, [pc, #748]	@ (8000a04 <__aeabi_dmul+0x314>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d100      	bne.n	800071e <__aeabi_dmul+0x2e>
 800071c:	e0f8      	b.n	8000910 <__aeabi_dmul+0x220>
 800071e:	4651      	mov	r1, sl
 8000720:	0f42      	lsrs	r2, r0, #29
 8000722:	00c9      	lsls	r1, r1, #3
 8000724:	430a      	orrs	r2, r1
 8000726:	2180      	movs	r1, #128	@ 0x80
 8000728:	0409      	lsls	r1, r1, #16
 800072a:	4311      	orrs	r1, r2
 800072c:	00c2      	lsls	r2, r0, #3
 800072e:	4691      	mov	r9, r2
 8000730:	4ab5      	ldr	r2, [pc, #724]	@ (8000a08 <__aeabi_dmul+0x318>)
 8000732:	468a      	mov	sl, r1
 8000734:	189d      	adds	r5, r3, r2
 8000736:	2300      	movs	r3, #0
 8000738:	4698      	mov	r8, r3
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	033c      	lsls	r4, r7, #12
 800073e:	007b      	lsls	r3, r7, #1
 8000740:	0ffa      	lsrs	r2, r7, #31
 8000742:	0030      	movs	r0, r6
 8000744:	0b24      	lsrs	r4, r4, #12
 8000746:	0d5b      	lsrs	r3, r3, #21
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	d100      	bne.n	800074e <__aeabi_dmul+0x5e>
 800074c:	e096      	b.n	800087c <__aeabi_dmul+0x18c>
 800074e:	4aad      	ldr	r2, [pc, #692]	@ (8000a04 <__aeabi_dmul+0x314>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d031      	beq.n	80007b8 <__aeabi_dmul+0xc8>
 8000754:	0f72      	lsrs	r2, r6, #29
 8000756:	00e4      	lsls	r4, r4, #3
 8000758:	4322      	orrs	r2, r4
 800075a:	2480      	movs	r4, #128	@ 0x80
 800075c:	0424      	lsls	r4, r4, #16
 800075e:	4314      	orrs	r4, r2
 8000760:	4aa9      	ldr	r2, [pc, #676]	@ (8000a08 <__aeabi_dmul+0x318>)
 8000762:	00f0      	lsls	r0, r6, #3
 8000764:	4694      	mov	ip, r2
 8000766:	4463      	add	r3, ip
 8000768:	195b      	adds	r3, r3, r5
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	4642      	mov	r2, r8
 8000770:	2600      	movs	r6, #0
 8000772:	2a0a      	cmp	r2, #10
 8000774:	dc42      	bgt.n	80007fc <__aeabi_dmul+0x10c>
 8000776:	465a      	mov	r2, fp
 8000778:	9900      	ldr	r1, [sp, #0]
 800077a:	404a      	eors	r2, r1
 800077c:	4693      	mov	fp, r2
 800077e:	4642      	mov	r2, r8
 8000780:	2a02      	cmp	r2, #2
 8000782:	dc32      	bgt.n	80007ea <__aeabi_dmul+0xfa>
 8000784:	3a01      	subs	r2, #1
 8000786:	2a01      	cmp	r2, #1
 8000788:	d900      	bls.n	800078c <__aeabi_dmul+0x9c>
 800078a:	e149      	b.n	8000a20 <__aeabi_dmul+0x330>
 800078c:	2e02      	cmp	r6, #2
 800078e:	d100      	bne.n	8000792 <__aeabi_dmul+0xa2>
 8000790:	e0ca      	b.n	8000928 <__aeabi_dmul+0x238>
 8000792:	2e01      	cmp	r6, #1
 8000794:	d13d      	bne.n	8000812 <__aeabi_dmul+0x122>
 8000796:	2300      	movs	r3, #0
 8000798:	2400      	movs	r4, #0
 800079a:	2200      	movs	r2, #0
 800079c:	0010      	movs	r0, r2
 800079e:	465a      	mov	r2, fp
 80007a0:	051b      	lsls	r3, r3, #20
 80007a2:	4323      	orrs	r3, r4
 80007a4:	07d2      	lsls	r2, r2, #31
 80007a6:	4313      	orrs	r3, r2
 80007a8:	0019      	movs	r1, r3
 80007aa:	b007      	add	sp, #28
 80007ac:	bcf0      	pop	{r4, r5, r6, r7}
 80007ae:	46bb      	mov	fp, r7
 80007b0:	46b2      	mov	sl, r6
 80007b2:	46a9      	mov	r9, r5
 80007b4:	46a0      	mov	r8, r4
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	4b92      	ldr	r3, [pc, #584]	@ (8000a04 <__aeabi_dmul+0x314>)
 80007ba:	4326      	orrs	r6, r4
 80007bc:	18eb      	adds	r3, r5, r3
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dmul+0xd4>
 80007c2:	e0bb      	b.n	800093c <__aeabi_dmul+0x24c>
 80007c4:	2203      	movs	r2, #3
 80007c6:	4641      	mov	r1, r8
 80007c8:	4311      	orrs	r1, r2
 80007ca:	465a      	mov	r2, fp
 80007cc:	4688      	mov	r8, r1
 80007ce:	9900      	ldr	r1, [sp, #0]
 80007d0:	404a      	eors	r2, r1
 80007d2:	2180      	movs	r1, #128	@ 0x80
 80007d4:	0109      	lsls	r1, r1, #4
 80007d6:	468c      	mov	ip, r1
 80007d8:	0029      	movs	r1, r5
 80007da:	4461      	add	r1, ip
 80007dc:	9101      	str	r1, [sp, #4]
 80007de:	4641      	mov	r1, r8
 80007e0:	290a      	cmp	r1, #10
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dmul+0xf6>
 80007e4:	e233      	b.n	8000c4e <__aeabi_dmul+0x55e>
 80007e6:	4693      	mov	fp, r2
 80007e8:	2603      	movs	r6, #3
 80007ea:	4642      	mov	r2, r8
 80007ec:	2701      	movs	r7, #1
 80007ee:	4097      	lsls	r7, r2
 80007f0:	21a6      	movs	r1, #166	@ 0xa6
 80007f2:	003a      	movs	r2, r7
 80007f4:	00c9      	lsls	r1, r1, #3
 80007f6:	400a      	ands	r2, r1
 80007f8:	420f      	tst	r7, r1
 80007fa:	d031      	beq.n	8000860 <__aeabi_dmul+0x170>
 80007fc:	9e02      	ldr	r6, [sp, #8]
 80007fe:	2e02      	cmp	r6, #2
 8000800:	d100      	bne.n	8000804 <__aeabi_dmul+0x114>
 8000802:	e235      	b.n	8000c70 <__aeabi_dmul+0x580>
 8000804:	2e03      	cmp	r6, #3
 8000806:	d100      	bne.n	800080a <__aeabi_dmul+0x11a>
 8000808:	e1d2      	b.n	8000bb0 <__aeabi_dmul+0x4c0>
 800080a:	4654      	mov	r4, sl
 800080c:	4648      	mov	r0, r9
 800080e:	2e01      	cmp	r6, #1
 8000810:	d0c1      	beq.n	8000796 <__aeabi_dmul+0xa6>
 8000812:	9a01      	ldr	r2, [sp, #4]
 8000814:	4b7d      	ldr	r3, [pc, #500]	@ (8000a0c <__aeabi_dmul+0x31c>)
 8000816:	4694      	mov	ip, r2
 8000818:	4463      	add	r3, ip
 800081a:	2b00      	cmp	r3, #0
 800081c:	dc00      	bgt.n	8000820 <__aeabi_dmul+0x130>
 800081e:	e0c0      	b.n	80009a2 <__aeabi_dmul+0x2b2>
 8000820:	0742      	lsls	r2, r0, #29
 8000822:	d009      	beq.n	8000838 <__aeabi_dmul+0x148>
 8000824:	220f      	movs	r2, #15
 8000826:	4002      	ands	r2, r0
 8000828:	2a04      	cmp	r2, #4
 800082a:	d005      	beq.n	8000838 <__aeabi_dmul+0x148>
 800082c:	1d02      	adds	r2, r0, #4
 800082e:	4282      	cmp	r2, r0
 8000830:	4180      	sbcs	r0, r0
 8000832:	4240      	negs	r0, r0
 8000834:	1824      	adds	r4, r4, r0
 8000836:	0010      	movs	r0, r2
 8000838:	01e2      	lsls	r2, r4, #7
 800083a:	d506      	bpl.n	800084a <__aeabi_dmul+0x15a>
 800083c:	4b74      	ldr	r3, [pc, #464]	@ (8000a10 <__aeabi_dmul+0x320>)
 800083e:	9a01      	ldr	r2, [sp, #4]
 8000840:	401c      	ands	r4, r3
 8000842:	2380      	movs	r3, #128	@ 0x80
 8000844:	4694      	mov	ip, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4463      	add	r3, ip
 800084a:	4a72      	ldr	r2, [pc, #456]	@ (8000a14 <__aeabi_dmul+0x324>)
 800084c:	4293      	cmp	r3, r2
 800084e:	dc6b      	bgt.n	8000928 <__aeabi_dmul+0x238>
 8000850:	0762      	lsls	r2, r4, #29
 8000852:	08c0      	lsrs	r0, r0, #3
 8000854:	0264      	lsls	r4, r4, #9
 8000856:	055b      	lsls	r3, r3, #21
 8000858:	4302      	orrs	r2, r0
 800085a:	0b24      	lsrs	r4, r4, #12
 800085c:	0d5b      	lsrs	r3, r3, #21
 800085e:	e79d      	b.n	800079c <__aeabi_dmul+0xac>
 8000860:	2190      	movs	r1, #144	@ 0x90
 8000862:	0089      	lsls	r1, r1, #2
 8000864:	420f      	tst	r7, r1
 8000866:	d163      	bne.n	8000930 <__aeabi_dmul+0x240>
 8000868:	2288      	movs	r2, #136	@ 0x88
 800086a:	423a      	tst	r2, r7
 800086c:	d100      	bne.n	8000870 <__aeabi_dmul+0x180>
 800086e:	e0d7      	b.n	8000a20 <__aeabi_dmul+0x330>
 8000870:	9b00      	ldr	r3, [sp, #0]
 8000872:	46a2      	mov	sl, r4
 8000874:	469b      	mov	fp, r3
 8000876:	4681      	mov	r9, r0
 8000878:	9602      	str	r6, [sp, #8]
 800087a:	e7bf      	b.n	80007fc <__aeabi_dmul+0x10c>
 800087c:	0023      	movs	r3, r4
 800087e:	4333      	orrs	r3, r6
 8000880:	d100      	bne.n	8000884 <__aeabi_dmul+0x194>
 8000882:	e07f      	b.n	8000984 <__aeabi_dmul+0x294>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d100      	bne.n	800088a <__aeabi_dmul+0x19a>
 8000888:	e1ad      	b.n	8000be6 <__aeabi_dmul+0x4f6>
 800088a:	0020      	movs	r0, r4
 800088c:	f000 faf2 	bl	8000e74 <__clzsi2>
 8000890:	0002      	movs	r2, r0
 8000892:	0003      	movs	r3, r0
 8000894:	3a0b      	subs	r2, #11
 8000896:	201d      	movs	r0, #29
 8000898:	0019      	movs	r1, r3
 800089a:	1a82      	subs	r2, r0, r2
 800089c:	0030      	movs	r0, r6
 800089e:	3908      	subs	r1, #8
 80008a0:	40d0      	lsrs	r0, r2
 80008a2:	408c      	lsls	r4, r1
 80008a4:	4304      	orrs	r4, r0
 80008a6:	0030      	movs	r0, r6
 80008a8:	4088      	lsls	r0, r1
 80008aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000a18 <__aeabi_dmul+0x328>)
 80008ac:	1aeb      	subs	r3, r5, r3
 80008ae:	4694      	mov	ip, r2
 80008b0:	4463      	add	r3, ip
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	4642      	mov	r2, r8
 80008b8:	2600      	movs	r6, #0
 80008ba:	2a0a      	cmp	r2, #10
 80008bc:	dc00      	bgt.n	80008c0 <__aeabi_dmul+0x1d0>
 80008be:	e75a      	b.n	8000776 <__aeabi_dmul+0x86>
 80008c0:	e79c      	b.n	80007fc <__aeabi_dmul+0x10c>
 80008c2:	4653      	mov	r3, sl
 80008c4:	4303      	orrs	r3, r0
 80008c6:	4699      	mov	r9, r3
 80008c8:	d054      	beq.n	8000974 <__aeabi_dmul+0x284>
 80008ca:	4653      	mov	r3, sl
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dmul+0x1e2>
 80008d0:	e177      	b.n	8000bc2 <__aeabi_dmul+0x4d2>
 80008d2:	4650      	mov	r0, sl
 80008d4:	f000 face 	bl	8000e74 <__clzsi2>
 80008d8:	230b      	movs	r3, #11
 80008da:	425b      	negs	r3, r3
 80008dc:	469c      	mov	ip, r3
 80008de:	0002      	movs	r2, r0
 80008e0:	4484      	add	ip, r0
 80008e2:	0011      	movs	r1, r2
 80008e4:	4650      	mov	r0, sl
 80008e6:	3908      	subs	r1, #8
 80008e8:	4088      	lsls	r0, r1
 80008ea:	231d      	movs	r3, #29
 80008ec:	4680      	mov	r8, r0
 80008ee:	4660      	mov	r0, ip
 80008f0:	1a1b      	subs	r3, r3, r0
 80008f2:	0020      	movs	r0, r4
 80008f4:	40d8      	lsrs	r0, r3
 80008f6:	0003      	movs	r3, r0
 80008f8:	4640      	mov	r0, r8
 80008fa:	4303      	orrs	r3, r0
 80008fc:	469a      	mov	sl, r3
 80008fe:	0023      	movs	r3, r4
 8000900:	408b      	lsls	r3, r1
 8000902:	4699      	mov	r9, r3
 8000904:	2300      	movs	r3, #0
 8000906:	4d44      	ldr	r5, [pc, #272]	@ (8000a18 <__aeabi_dmul+0x328>)
 8000908:	4698      	mov	r8, r3
 800090a:	1aad      	subs	r5, r5, r2
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	e715      	b.n	800073c <__aeabi_dmul+0x4c>
 8000910:	4652      	mov	r2, sl
 8000912:	4302      	orrs	r2, r0
 8000914:	4691      	mov	r9, r2
 8000916:	d126      	bne.n	8000966 <__aeabi_dmul+0x276>
 8000918:	2200      	movs	r2, #0
 800091a:	001d      	movs	r5, r3
 800091c:	2302      	movs	r3, #2
 800091e:	4692      	mov	sl, r2
 8000920:	3208      	adds	r2, #8
 8000922:	4690      	mov	r8, r2
 8000924:	9302      	str	r3, [sp, #8]
 8000926:	e709      	b.n	800073c <__aeabi_dmul+0x4c>
 8000928:	2400      	movs	r4, #0
 800092a:	2200      	movs	r2, #0
 800092c:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <__aeabi_dmul+0x314>)
 800092e:	e735      	b.n	800079c <__aeabi_dmul+0xac>
 8000930:	2300      	movs	r3, #0
 8000932:	2480      	movs	r4, #128	@ 0x80
 8000934:	469b      	mov	fp, r3
 8000936:	0324      	lsls	r4, r4, #12
 8000938:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <__aeabi_dmul+0x314>)
 800093a:	e72f      	b.n	800079c <__aeabi_dmul+0xac>
 800093c:	2202      	movs	r2, #2
 800093e:	4641      	mov	r1, r8
 8000940:	4311      	orrs	r1, r2
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	4694      	mov	ip, r2
 8000948:	002a      	movs	r2, r5
 800094a:	4462      	add	r2, ip
 800094c:	4688      	mov	r8, r1
 800094e:	9201      	str	r2, [sp, #4]
 8000950:	290a      	cmp	r1, #10
 8000952:	dd00      	ble.n	8000956 <__aeabi_dmul+0x266>
 8000954:	e752      	b.n	80007fc <__aeabi_dmul+0x10c>
 8000956:	465a      	mov	r2, fp
 8000958:	2000      	movs	r0, #0
 800095a:	9900      	ldr	r1, [sp, #0]
 800095c:	0004      	movs	r4, r0
 800095e:	404a      	eors	r2, r1
 8000960:	4693      	mov	fp, r2
 8000962:	2602      	movs	r6, #2
 8000964:	e70b      	b.n	800077e <__aeabi_dmul+0x8e>
 8000966:	220c      	movs	r2, #12
 8000968:	001d      	movs	r5, r3
 800096a:	2303      	movs	r3, #3
 800096c:	4681      	mov	r9, r0
 800096e:	4690      	mov	r8, r2
 8000970:	9302      	str	r3, [sp, #8]
 8000972:	e6e3      	b.n	800073c <__aeabi_dmul+0x4c>
 8000974:	2300      	movs	r3, #0
 8000976:	469a      	mov	sl, r3
 8000978:	3304      	adds	r3, #4
 800097a:	4698      	mov	r8, r3
 800097c:	3b03      	subs	r3, #3
 800097e:	2500      	movs	r5, #0
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	e6db      	b.n	800073c <__aeabi_dmul+0x4c>
 8000984:	4642      	mov	r2, r8
 8000986:	3301      	adds	r3, #1
 8000988:	431a      	orrs	r2, r3
 800098a:	002b      	movs	r3, r5
 800098c:	4690      	mov	r8, r2
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	9201      	str	r2, [sp, #4]
 8000992:	4642      	mov	r2, r8
 8000994:	2400      	movs	r4, #0
 8000996:	2000      	movs	r0, #0
 8000998:	2601      	movs	r6, #1
 800099a:	2a0a      	cmp	r2, #10
 800099c:	dc00      	bgt.n	80009a0 <__aeabi_dmul+0x2b0>
 800099e:	e6ea      	b.n	8000776 <__aeabi_dmul+0x86>
 80009a0:	e72c      	b.n	80007fc <__aeabi_dmul+0x10c>
 80009a2:	2201      	movs	r2, #1
 80009a4:	1ad2      	subs	r2, r2, r3
 80009a6:	2a38      	cmp	r2, #56	@ 0x38
 80009a8:	dd00      	ble.n	80009ac <__aeabi_dmul+0x2bc>
 80009aa:	e6f4      	b.n	8000796 <__aeabi_dmul+0xa6>
 80009ac:	2a1f      	cmp	r2, #31
 80009ae:	dc00      	bgt.n	80009b2 <__aeabi_dmul+0x2c2>
 80009b0:	e12a      	b.n	8000c08 <__aeabi_dmul+0x518>
 80009b2:	211f      	movs	r1, #31
 80009b4:	4249      	negs	r1, r1
 80009b6:	1acb      	subs	r3, r1, r3
 80009b8:	0021      	movs	r1, r4
 80009ba:	40d9      	lsrs	r1, r3
 80009bc:	000b      	movs	r3, r1
 80009be:	2a20      	cmp	r2, #32
 80009c0:	d005      	beq.n	80009ce <__aeabi_dmul+0x2de>
 80009c2:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <__aeabi_dmul+0x32c>)
 80009c4:	9d01      	ldr	r5, [sp, #4]
 80009c6:	4694      	mov	ip, r2
 80009c8:	4465      	add	r5, ip
 80009ca:	40ac      	lsls	r4, r5
 80009cc:	4320      	orrs	r0, r4
 80009ce:	1e42      	subs	r2, r0, #1
 80009d0:	4190      	sbcs	r0, r2
 80009d2:	4318      	orrs	r0, r3
 80009d4:	2307      	movs	r3, #7
 80009d6:	0019      	movs	r1, r3
 80009d8:	2400      	movs	r4, #0
 80009da:	4001      	ands	r1, r0
 80009dc:	4203      	tst	r3, r0
 80009de:	d00c      	beq.n	80009fa <__aeabi_dmul+0x30a>
 80009e0:	230f      	movs	r3, #15
 80009e2:	4003      	ands	r3, r0
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d100      	bne.n	80009ea <__aeabi_dmul+0x2fa>
 80009e8:	e140      	b.n	8000c6c <__aeabi_dmul+0x57c>
 80009ea:	1d03      	adds	r3, r0, #4
 80009ec:	4283      	cmp	r3, r0
 80009ee:	41a4      	sbcs	r4, r4
 80009f0:	0018      	movs	r0, r3
 80009f2:	4264      	negs	r4, r4
 80009f4:	0761      	lsls	r1, r4, #29
 80009f6:	0264      	lsls	r4, r4, #9
 80009f8:	0b24      	lsrs	r4, r4, #12
 80009fa:	08c2      	lsrs	r2, r0, #3
 80009fc:	2300      	movs	r3, #0
 80009fe:	430a      	orrs	r2, r1
 8000a00:	e6cc      	b.n	800079c <__aeabi_dmul+0xac>
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	000007ff 	.word	0x000007ff
 8000a08:	fffffc01 	.word	0xfffffc01
 8000a0c:	000003ff 	.word	0x000003ff
 8000a10:	feffffff 	.word	0xfeffffff
 8000a14:	000007fe 	.word	0x000007fe
 8000a18:	fffffc0d 	.word	0xfffffc0d
 8000a1c:	0000043e 	.word	0x0000043e
 8000a20:	4649      	mov	r1, r9
 8000a22:	464a      	mov	r2, r9
 8000a24:	0409      	lsls	r1, r1, #16
 8000a26:	0c09      	lsrs	r1, r1, #16
 8000a28:	000d      	movs	r5, r1
 8000a2a:	0c16      	lsrs	r6, r2, #16
 8000a2c:	0c02      	lsrs	r2, r0, #16
 8000a2e:	0400      	lsls	r0, r0, #16
 8000a30:	0c00      	lsrs	r0, r0, #16
 8000a32:	4345      	muls	r5, r0
 8000a34:	46ac      	mov	ip, r5
 8000a36:	0005      	movs	r5, r0
 8000a38:	4375      	muls	r5, r6
 8000a3a:	46a8      	mov	r8, r5
 8000a3c:	0015      	movs	r5, r2
 8000a3e:	000f      	movs	r7, r1
 8000a40:	4375      	muls	r5, r6
 8000a42:	9200      	str	r2, [sp, #0]
 8000a44:	9502      	str	r5, [sp, #8]
 8000a46:	002a      	movs	r2, r5
 8000a48:	9d00      	ldr	r5, [sp, #0]
 8000a4a:	436f      	muls	r7, r5
 8000a4c:	4665      	mov	r5, ip
 8000a4e:	0c2d      	lsrs	r5, r5, #16
 8000a50:	46a9      	mov	r9, r5
 8000a52:	4447      	add	r7, r8
 8000a54:	444f      	add	r7, r9
 8000a56:	45b8      	cmp	r8, r7
 8000a58:	d905      	bls.n	8000a66 <__aeabi_dmul+0x376>
 8000a5a:	0015      	movs	r5, r2
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	0252      	lsls	r2, r2, #9
 8000a60:	4690      	mov	r8, r2
 8000a62:	4445      	add	r5, r8
 8000a64:	9502      	str	r5, [sp, #8]
 8000a66:	0c3d      	lsrs	r5, r7, #16
 8000a68:	9503      	str	r5, [sp, #12]
 8000a6a:	4665      	mov	r5, ip
 8000a6c:	042d      	lsls	r5, r5, #16
 8000a6e:	043f      	lsls	r7, r7, #16
 8000a70:	0c2d      	lsrs	r5, r5, #16
 8000a72:	46ac      	mov	ip, r5
 8000a74:	003d      	movs	r5, r7
 8000a76:	4465      	add	r5, ip
 8000a78:	9504      	str	r5, [sp, #16]
 8000a7a:	0c25      	lsrs	r5, r4, #16
 8000a7c:	0424      	lsls	r4, r4, #16
 8000a7e:	0c24      	lsrs	r4, r4, #16
 8000a80:	46ac      	mov	ip, r5
 8000a82:	0025      	movs	r5, r4
 8000a84:	4375      	muls	r5, r6
 8000a86:	46a8      	mov	r8, r5
 8000a88:	4665      	mov	r5, ip
 8000a8a:	000f      	movs	r7, r1
 8000a8c:	4369      	muls	r1, r5
 8000a8e:	4441      	add	r1, r8
 8000a90:	4689      	mov	r9, r1
 8000a92:	4367      	muls	r7, r4
 8000a94:	0c39      	lsrs	r1, r7, #16
 8000a96:	4449      	add	r1, r9
 8000a98:	436e      	muls	r6, r5
 8000a9a:	4588      	cmp	r8, r1
 8000a9c:	d903      	bls.n	8000aa6 <__aeabi_dmul+0x3b6>
 8000a9e:	2280      	movs	r2, #128	@ 0x80
 8000aa0:	0252      	lsls	r2, r2, #9
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4446      	add	r6, r8
 8000aa6:	0c0d      	lsrs	r5, r1, #16
 8000aa8:	46a8      	mov	r8, r5
 8000aaa:	0035      	movs	r5, r6
 8000aac:	4445      	add	r5, r8
 8000aae:	9505      	str	r5, [sp, #20]
 8000ab0:	9d03      	ldr	r5, [sp, #12]
 8000ab2:	043f      	lsls	r7, r7, #16
 8000ab4:	46a8      	mov	r8, r5
 8000ab6:	0c3f      	lsrs	r7, r7, #16
 8000ab8:	0409      	lsls	r1, r1, #16
 8000aba:	19c9      	adds	r1, r1, r7
 8000abc:	4488      	add	r8, r1
 8000abe:	4645      	mov	r5, r8
 8000ac0:	9503      	str	r5, [sp, #12]
 8000ac2:	4655      	mov	r5, sl
 8000ac4:	042e      	lsls	r6, r5, #16
 8000ac6:	0c36      	lsrs	r6, r6, #16
 8000ac8:	0c2f      	lsrs	r7, r5, #16
 8000aca:	0035      	movs	r5, r6
 8000acc:	4345      	muls	r5, r0
 8000ace:	4378      	muls	r0, r7
 8000ad0:	4681      	mov	r9, r0
 8000ad2:	0038      	movs	r0, r7
 8000ad4:	46a8      	mov	r8, r5
 8000ad6:	0c2d      	lsrs	r5, r5, #16
 8000ad8:	46aa      	mov	sl, r5
 8000ada:	9a00      	ldr	r2, [sp, #0]
 8000adc:	4350      	muls	r0, r2
 8000ade:	4372      	muls	r2, r6
 8000ae0:	444a      	add	r2, r9
 8000ae2:	4452      	add	r2, sl
 8000ae4:	4591      	cmp	r9, r2
 8000ae6:	d903      	bls.n	8000af0 <__aeabi_dmul+0x400>
 8000ae8:	2580      	movs	r5, #128	@ 0x80
 8000aea:	026d      	lsls	r5, r5, #9
 8000aec:	46a9      	mov	r9, r5
 8000aee:	4448      	add	r0, r9
 8000af0:	0c15      	lsrs	r5, r2, #16
 8000af2:	46a9      	mov	r9, r5
 8000af4:	4645      	mov	r5, r8
 8000af6:	042d      	lsls	r5, r5, #16
 8000af8:	0c2d      	lsrs	r5, r5, #16
 8000afa:	46a8      	mov	r8, r5
 8000afc:	4665      	mov	r5, ip
 8000afe:	437d      	muls	r5, r7
 8000b00:	0412      	lsls	r2, r2, #16
 8000b02:	4448      	add	r0, r9
 8000b04:	4490      	add	r8, r2
 8000b06:	46a9      	mov	r9, r5
 8000b08:	0032      	movs	r2, r6
 8000b0a:	4665      	mov	r5, ip
 8000b0c:	4362      	muls	r2, r4
 8000b0e:	436e      	muls	r6, r5
 8000b10:	437c      	muls	r4, r7
 8000b12:	0c17      	lsrs	r7, r2, #16
 8000b14:	1936      	adds	r6, r6, r4
 8000b16:	19bf      	adds	r7, r7, r6
 8000b18:	42bc      	cmp	r4, r7
 8000b1a:	d903      	bls.n	8000b24 <__aeabi_dmul+0x434>
 8000b1c:	2480      	movs	r4, #128	@ 0x80
 8000b1e:	0264      	lsls	r4, r4, #9
 8000b20:	46a4      	mov	ip, r4
 8000b22:	44e1      	add	r9, ip
 8000b24:	9c02      	ldr	r4, [sp, #8]
 8000b26:	9e03      	ldr	r6, [sp, #12]
 8000b28:	46a4      	mov	ip, r4
 8000b2a:	9d05      	ldr	r5, [sp, #20]
 8000b2c:	4466      	add	r6, ip
 8000b2e:	428e      	cmp	r6, r1
 8000b30:	4189      	sbcs	r1, r1
 8000b32:	46ac      	mov	ip, r5
 8000b34:	0412      	lsls	r2, r2, #16
 8000b36:	043c      	lsls	r4, r7, #16
 8000b38:	0c12      	lsrs	r2, r2, #16
 8000b3a:	18a2      	adds	r2, r4, r2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	4249      	negs	r1, r1
 8000b40:	1854      	adds	r4, r2, r1
 8000b42:	4446      	add	r6, r8
 8000b44:	46a4      	mov	ip, r4
 8000b46:	4546      	cmp	r6, r8
 8000b48:	41a4      	sbcs	r4, r4
 8000b4a:	4682      	mov	sl, r0
 8000b4c:	4264      	negs	r4, r4
 8000b4e:	46a0      	mov	r8, r4
 8000b50:	42aa      	cmp	r2, r5
 8000b52:	4192      	sbcs	r2, r2
 8000b54:	458c      	cmp	ip, r1
 8000b56:	4189      	sbcs	r1, r1
 8000b58:	44e2      	add	sl, ip
 8000b5a:	44d0      	add	r8, sl
 8000b5c:	4249      	negs	r1, r1
 8000b5e:	4252      	negs	r2, r2
 8000b60:	430a      	orrs	r2, r1
 8000b62:	45a0      	cmp	r8, r4
 8000b64:	41a4      	sbcs	r4, r4
 8000b66:	4582      	cmp	sl, r0
 8000b68:	4189      	sbcs	r1, r1
 8000b6a:	4264      	negs	r4, r4
 8000b6c:	4249      	negs	r1, r1
 8000b6e:	430c      	orrs	r4, r1
 8000b70:	4641      	mov	r1, r8
 8000b72:	0c3f      	lsrs	r7, r7, #16
 8000b74:	19d2      	adds	r2, r2, r7
 8000b76:	1912      	adds	r2, r2, r4
 8000b78:	0dcc      	lsrs	r4, r1, #23
 8000b7a:	9904      	ldr	r1, [sp, #16]
 8000b7c:	0270      	lsls	r0, r6, #9
 8000b7e:	4308      	orrs	r0, r1
 8000b80:	1e41      	subs	r1, r0, #1
 8000b82:	4188      	sbcs	r0, r1
 8000b84:	4641      	mov	r1, r8
 8000b86:	444a      	add	r2, r9
 8000b88:	0df6      	lsrs	r6, r6, #23
 8000b8a:	0252      	lsls	r2, r2, #9
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0249      	lsls	r1, r1, #9
 8000b90:	4314      	orrs	r4, r2
 8000b92:	4308      	orrs	r0, r1
 8000b94:	01d2      	lsls	r2, r2, #7
 8000b96:	d535      	bpl.n	8000c04 <__aeabi_dmul+0x514>
 8000b98:	2201      	movs	r2, #1
 8000b9a:	0843      	lsrs	r3, r0, #1
 8000b9c:	4002      	ands	r2, r0
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	07e0      	lsls	r0, r4, #31
 8000ba2:	4318      	orrs	r0, r3
 8000ba4:	0864      	lsrs	r4, r4, #1
 8000ba6:	e634      	b.n	8000812 <__aeabi_dmul+0x122>
 8000ba8:	9b00      	ldr	r3, [sp, #0]
 8000baa:	46a2      	mov	sl, r4
 8000bac:	469b      	mov	fp, r3
 8000bae:	4681      	mov	r9, r0
 8000bb0:	2480      	movs	r4, #128	@ 0x80
 8000bb2:	4653      	mov	r3, sl
 8000bb4:	0324      	lsls	r4, r4, #12
 8000bb6:	431c      	orrs	r4, r3
 8000bb8:	0324      	lsls	r4, r4, #12
 8000bba:	464a      	mov	r2, r9
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <__aeabi_dmul+0x588>)
 8000bbe:	0b24      	lsrs	r4, r4, #12
 8000bc0:	e5ec      	b.n	800079c <__aeabi_dmul+0xac>
 8000bc2:	f000 f957 	bl	8000e74 <__clzsi2>
 8000bc6:	2315      	movs	r3, #21
 8000bc8:	469c      	mov	ip, r3
 8000bca:	4484      	add	ip, r0
 8000bcc:	0002      	movs	r2, r0
 8000bce:	4663      	mov	r3, ip
 8000bd0:	3220      	adds	r2, #32
 8000bd2:	2b1c      	cmp	r3, #28
 8000bd4:	dc00      	bgt.n	8000bd8 <__aeabi_dmul+0x4e8>
 8000bd6:	e684      	b.n	80008e2 <__aeabi_dmul+0x1f2>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	4699      	mov	r9, r3
 8000bdc:	0023      	movs	r3, r4
 8000bde:	3808      	subs	r0, #8
 8000be0:	4083      	lsls	r3, r0
 8000be2:	469a      	mov	sl, r3
 8000be4:	e68e      	b.n	8000904 <__aeabi_dmul+0x214>
 8000be6:	f000 f945 	bl	8000e74 <__clzsi2>
 8000bea:	0002      	movs	r2, r0
 8000bec:	0003      	movs	r3, r0
 8000bee:	3215      	adds	r2, #21
 8000bf0:	3320      	adds	r3, #32
 8000bf2:	2a1c      	cmp	r2, #28
 8000bf4:	dc00      	bgt.n	8000bf8 <__aeabi_dmul+0x508>
 8000bf6:	e64e      	b.n	8000896 <__aeabi_dmul+0x1a6>
 8000bf8:	0002      	movs	r2, r0
 8000bfa:	0034      	movs	r4, r6
 8000bfc:	3a08      	subs	r2, #8
 8000bfe:	2000      	movs	r0, #0
 8000c00:	4094      	lsls	r4, r2
 8000c02:	e652      	b.n	80008aa <__aeabi_dmul+0x1ba>
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	e604      	b.n	8000812 <__aeabi_dmul+0x122>
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <__aeabi_dmul+0x58c>)
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	469c      	mov	ip, r3
 8000c0e:	0003      	movs	r3, r0
 8000c10:	9d01      	ldr	r5, [sp, #4]
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	4465      	add	r5, ip
 8000c16:	40a9      	lsls	r1, r5
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	40ab      	lsls	r3, r5
 8000c1e:	1e58      	subs	r0, r3, #1
 8000c20:	4183      	sbcs	r3, r0
 8000c22:	4319      	orrs	r1, r3
 8000c24:	0008      	movs	r0, r1
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	074b      	lsls	r3, r1, #29
 8000c2a:	d009      	beq.n	8000c40 <__aeabi_dmul+0x550>
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d005      	beq.n	8000c40 <__aeabi_dmul+0x550>
 8000c34:	1d0b      	adds	r3, r1, #4
 8000c36:	428b      	cmp	r3, r1
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	1824      	adds	r4, r4, r0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	0223      	lsls	r3, r4, #8
 8000c42:	d400      	bmi.n	8000c46 <__aeabi_dmul+0x556>
 8000c44:	e6d6      	b.n	80009f4 <__aeabi_dmul+0x304>
 8000c46:	2301      	movs	r3, #1
 8000c48:	2400      	movs	r4, #0
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	e5a6      	b.n	800079c <__aeabi_dmul+0xac>
 8000c4e:	290f      	cmp	r1, #15
 8000c50:	d1aa      	bne.n	8000ba8 <__aeabi_dmul+0x4b8>
 8000c52:	2380      	movs	r3, #128	@ 0x80
 8000c54:	4652      	mov	r2, sl
 8000c56:	031b      	lsls	r3, r3, #12
 8000c58:	421a      	tst	r2, r3
 8000c5a:	d0a9      	beq.n	8000bb0 <__aeabi_dmul+0x4c0>
 8000c5c:	421c      	tst	r4, r3
 8000c5e:	d1a7      	bne.n	8000bb0 <__aeabi_dmul+0x4c0>
 8000c60:	431c      	orrs	r4, r3
 8000c62:	9b00      	ldr	r3, [sp, #0]
 8000c64:	0002      	movs	r2, r0
 8000c66:	469b      	mov	fp, r3
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <__aeabi_dmul+0x588>)
 8000c6a:	e597      	b.n	800079c <__aeabi_dmul+0xac>
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	e6c1      	b.n	80009f4 <__aeabi_dmul+0x304>
 8000c70:	2400      	movs	r4, #0
 8000c72:	4b01      	ldr	r3, [pc, #4]	@ (8000c78 <__aeabi_dmul+0x588>)
 8000c74:	0022      	movs	r2, r4
 8000c76:	e591      	b.n	800079c <__aeabi_dmul+0xac>
 8000c78:	000007ff 	.word	0x000007ff
 8000c7c:	0000041e 	.word	0x0000041e

08000c80 <__aeabi_i2d>:
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	2800      	cmp	r0, #0
 8000c84:	d016      	beq.n	8000cb4 <__aeabi_i2d+0x34>
 8000c86:	17c3      	asrs	r3, r0, #31
 8000c88:	18c5      	adds	r5, r0, r3
 8000c8a:	405d      	eors	r5, r3
 8000c8c:	0fc4      	lsrs	r4, r0, #31
 8000c8e:	0028      	movs	r0, r5
 8000c90:	f000 f8f0 	bl	8000e74 <__clzsi2>
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <__aeabi_i2d+0x58>)
 8000c96:	1a1b      	subs	r3, r3, r0
 8000c98:	055b      	lsls	r3, r3, #21
 8000c9a:	0d5b      	lsrs	r3, r3, #21
 8000c9c:	280a      	cmp	r0, #10
 8000c9e:	dc14      	bgt.n	8000cca <__aeabi_i2d+0x4a>
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	002e      	movs	r6, r5
 8000ca4:	3215      	adds	r2, #21
 8000ca6:	4096      	lsls	r6, r2
 8000ca8:	220b      	movs	r2, #11
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	40d5      	lsrs	r5, r2
 8000cae:	032d      	lsls	r5, r5, #12
 8000cb0:	0b2d      	lsrs	r5, r5, #12
 8000cb2:	e003      	b.n	8000cbc <__aeabi_i2d+0x3c>
 8000cb4:	2400      	movs	r4, #0
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2500      	movs	r5, #0
 8000cba:	2600      	movs	r6, #0
 8000cbc:	051b      	lsls	r3, r3, #20
 8000cbe:	432b      	orrs	r3, r5
 8000cc0:	07e4      	lsls	r4, r4, #31
 8000cc2:	4323      	orrs	r3, r4
 8000cc4:	0030      	movs	r0, r6
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	380b      	subs	r0, #11
 8000ccc:	4085      	lsls	r5, r0
 8000cce:	032d      	lsls	r5, r5, #12
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	0b2d      	lsrs	r5, r5, #12
 8000cd4:	e7f2      	b.n	8000cbc <__aeabi_i2d+0x3c>
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	0000041e 	.word	0x0000041e

08000cdc <__aeabi_f2d>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	0043      	lsls	r3, r0, #1
 8000ce2:	0fc4      	lsrs	r4, r0, #31
 8000ce4:	20fe      	movs	r0, #254	@ 0xfe
 8000ce6:	0e1b      	lsrs	r3, r3, #24
 8000ce8:	1c59      	adds	r1, r3, #1
 8000cea:	0a55      	lsrs	r5, r2, #9
 8000cec:	4208      	tst	r0, r1
 8000cee:	d00c      	beq.n	8000d0a <__aeabi_f2d+0x2e>
 8000cf0:	21e0      	movs	r1, #224	@ 0xe0
 8000cf2:	0089      	lsls	r1, r1, #2
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	076d      	lsls	r5, r5, #29
 8000cf8:	0b12      	lsrs	r2, r2, #12
 8000cfa:	4463      	add	r3, ip
 8000cfc:	051b      	lsls	r3, r3, #20
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	07e4      	lsls	r4, r4, #31
 8000d02:	4323      	orrs	r3, r4
 8000d04:	0028      	movs	r0, r5
 8000d06:	0019      	movs	r1, r3
 8000d08:	bd70      	pop	{r4, r5, r6, pc}
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d114      	bne.n	8000d38 <__aeabi_f2d+0x5c>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d01b      	beq.n	8000d4a <__aeabi_f2d+0x6e>
 8000d12:	0028      	movs	r0, r5
 8000d14:	f000 f8ae 	bl	8000e74 <__clzsi2>
 8000d18:	280a      	cmp	r0, #10
 8000d1a:	dc1c      	bgt.n	8000d56 <__aeabi_f2d+0x7a>
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	002a      	movs	r2, r5
 8000d20:	1a1b      	subs	r3, r3, r0
 8000d22:	40da      	lsrs	r2, r3
 8000d24:	0003      	movs	r3, r0
 8000d26:	3315      	adds	r3, #21
 8000d28:	409d      	lsls	r5, r3
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <__aeabi_f2d+0x88>)
 8000d2c:	0312      	lsls	r2, r2, #12
 8000d2e:	1a1b      	subs	r3, r3, r0
 8000d30:	055b      	lsls	r3, r3, #21
 8000d32:	0b12      	lsrs	r2, r2, #12
 8000d34:	0d5b      	lsrs	r3, r3, #21
 8000d36:	e7e1      	b.n	8000cfc <__aeabi_f2d+0x20>
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	d009      	beq.n	8000d50 <__aeabi_f2d+0x74>
 8000d3c:	0b13      	lsrs	r3, r2, #12
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	0312      	lsls	r2, r2, #12
 8000d42:	431a      	orrs	r2, r3
 8000d44:	076d      	lsls	r5, r5, #29
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <__aeabi_f2d+0x8c>)
 8000d48:	e7d8      	b.n	8000cfc <__aeabi_f2d+0x20>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	e7d5      	b.n	8000cfc <__aeabi_f2d+0x20>
 8000d50:	2200      	movs	r2, #0
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <__aeabi_f2d+0x8c>)
 8000d54:	e7d2      	b.n	8000cfc <__aeabi_f2d+0x20>
 8000d56:	0003      	movs	r3, r0
 8000d58:	002a      	movs	r2, r5
 8000d5a:	3b0b      	subs	r3, #11
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	2500      	movs	r5, #0
 8000d60:	e7e3      	b.n	8000d2a <__aeabi_f2d+0x4e>
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	00000389 	.word	0x00000389
 8000d68:	000007ff 	.word	0x000007ff

08000d6c <__aeabi_d2f>:
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	004b      	lsls	r3, r1, #1
 8000d70:	030f      	lsls	r7, r1, #12
 8000d72:	0d5b      	lsrs	r3, r3, #21
 8000d74:	4c3b      	ldr	r4, [pc, #236]	@ (8000e64 <__aeabi_d2f+0xf8>)
 8000d76:	0f45      	lsrs	r5, r0, #29
 8000d78:	b083      	sub	sp, #12
 8000d7a:	0a7f      	lsrs	r7, r7, #9
 8000d7c:	1c5e      	adds	r6, r3, #1
 8000d7e:	432f      	orrs	r7, r5
 8000d80:	9000      	str	r0, [sp, #0]
 8000d82:	9101      	str	r1, [sp, #4]
 8000d84:	0fca      	lsrs	r2, r1, #31
 8000d86:	00c5      	lsls	r5, r0, #3
 8000d88:	4226      	tst	r6, r4
 8000d8a:	d00b      	beq.n	8000da4 <__aeabi_d2f+0x38>
 8000d8c:	4936      	ldr	r1, [pc, #216]	@ (8000e68 <__aeabi_d2f+0xfc>)
 8000d8e:	185c      	adds	r4, r3, r1
 8000d90:	2cfe      	cmp	r4, #254	@ 0xfe
 8000d92:	dd13      	ble.n	8000dbc <__aeabi_d2f+0x50>
 8000d94:	20ff      	movs	r0, #255	@ 0xff
 8000d96:	2300      	movs	r3, #0
 8000d98:	05c0      	lsls	r0, r0, #23
 8000d9a:	4318      	orrs	r0, r3
 8000d9c:	07d2      	lsls	r2, r2, #31
 8000d9e:	4310      	orrs	r0, r2
 8000da0:	b003      	add	sp, #12
 8000da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <__aeabi_d2f+0x42>
 8000da8:	2000      	movs	r0, #0
 8000daa:	2300      	movs	r3, #0
 8000dac:	e7f4      	b.n	8000d98 <__aeabi_d2f+0x2c>
 8000dae:	433d      	orrs	r5, r7
 8000db0:	d0f0      	beq.n	8000d94 <__aeabi_d2f+0x28>
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	03db      	lsls	r3, r3, #15
 8000db6:	20ff      	movs	r0, #255	@ 0xff
 8000db8:	433b      	orrs	r3, r7
 8000dba:	e7ed      	b.n	8000d98 <__aeabi_d2f+0x2c>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	dd14      	ble.n	8000dea <__aeabi_d2f+0x7e>
 8000dc0:	9b00      	ldr	r3, [sp, #0]
 8000dc2:	00ff      	lsls	r7, r7, #3
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	4183      	sbcs	r3, r0
 8000dca:	0f69      	lsrs	r1, r5, #29
 8000dcc:	433b      	orrs	r3, r7
 8000dce:	430b      	orrs	r3, r1
 8000dd0:	0759      	lsls	r1, r3, #29
 8000dd2:	d041      	beq.n	8000e58 <__aeabi_d2f+0xec>
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	2904      	cmp	r1, #4
 8000dda:	d028      	beq.n	8000e2e <__aeabi_d2f+0xc2>
 8000ddc:	3304      	adds	r3, #4
 8000dde:	0159      	lsls	r1, r3, #5
 8000de0:	d525      	bpl.n	8000e2e <__aeabi_d2f+0xc2>
 8000de2:	3401      	adds	r4, #1
 8000de4:	2300      	movs	r3, #0
 8000de6:	b2e0      	uxtb	r0, r4
 8000de8:	e7d6      	b.n	8000d98 <__aeabi_d2f+0x2c>
 8000dea:	0021      	movs	r1, r4
 8000dec:	3117      	adds	r1, #23
 8000dee:	dbdb      	blt.n	8000da8 <__aeabi_d2f+0x3c>
 8000df0:	2180      	movs	r1, #128	@ 0x80
 8000df2:	201e      	movs	r0, #30
 8000df4:	0409      	lsls	r1, r1, #16
 8000df6:	4339      	orrs	r1, r7
 8000df8:	1b00      	subs	r0, r0, r4
 8000dfa:	281f      	cmp	r0, #31
 8000dfc:	dd1b      	ble.n	8000e36 <__aeabi_d2f+0xca>
 8000dfe:	2602      	movs	r6, #2
 8000e00:	4276      	negs	r6, r6
 8000e02:	1b34      	subs	r4, r6, r4
 8000e04:	000e      	movs	r6, r1
 8000e06:	40e6      	lsrs	r6, r4
 8000e08:	0034      	movs	r4, r6
 8000e0a:	2820      	cmp	r0, #32
 8000e0c:	d004      	beq.n	8000e18 <__aeabi_d2f+0xac>
 8000e0e:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <__aeabi_d2f+0x100>)
 8000e10:	4684      	mov	ip, r0
 8000e12:	4463      	add	r3, ip
 8000e14:	4099      	lsls	r1, r3
 8000e16:	430d      	orrs	r5, r1
 8000e18:	002b      	movs	r3, r5
 8000e1a:	1e59      	subs	r1, r3, #1
 8000e1c:	418b      	sbcs	r3, r1
 8000e1e:	4323      	orrs	r3, r4
 8000e20:	0759      	lsls	r1, r3, #29
 8000e22:	d015      	beq.n	8000e50 <__aeabi_d2f+0xe4>
 8000e24:	210f      	movs	r1, #15
 8000e26:	2400      	movs	r4, #0
 8000e28:	4019      	ands	r1, r3
 8000e2a:	2904      	cmp	r1, #4
 8000e2c:	d117      	bne.n	8000e5e <__aeabi_d2f+0xf2>
 8000e2e:	019b      	lsls	r3, r3, #6
 8000e30:	0a5b      	lsrs	r3, r3, #9
 8000e32:	b2e0      	uxtb	r0, r4
 8000e34:	e7b0      	b.n	8000d98 <__aeabi_d2f+0x2c>
 8000e36:	4c0e      	ldr	r4, [pc, #56]	@ (8000e70 <__aeabi_d2f+0x104>)
 8000e38:	191c      	adds	r4, r3, r4
 8000e3a:	002b      	movs	r3, r5
 8000e3c:	40a5      	lsls	r5, r4
 8000e3e:	40c3      	lsrs	r3, r0
 8000e40:	40a1      	lsls	r1, r4
 8000e42:	1e68      	subs	r0, r5, #1
 8000e44:	4185      	sbcs	r5, r0
 8000e46:	4329      	orrs	r1, r5
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	0759      	lsls	r1, r3, #29
 8000e4e:	d1c1      	bne.n	8000dd4 <__aeabi_d2f+0x68>
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	2000      	movs	r0, #0
 8000e54:	0a5b      	lsrs	r3, r3, #9
 8000e56:	e79f      	b.n	8000d98 <__aeabi_d2f+0x2c>
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b2e0      	uxtb	r0, r4
 8000e5c:	e79c      	b.n	8000d98 <__aeabi_d2f+0x2c>
 8000e5e:	3304      	adds	r3, #4
 8000e60:	e7e5      	b.n	8000e2e <__aeabi_d2f+0xc2>
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	000007fe 	.word	0x000007fe
 8000e68:	fffffc80 	.word	0xfffffc80
 8000e6c:	fffffca2 	.word	0xfffffca2
 8000e70:	fffffc82 	.word	0xfffffc82

08000e74 <__clzsi2>:
 8000e74:	211c      	movs	r1, #28
 8000e76:	2301      	movs	r3, #1
 8000e78:	041b      	lsls	r3, r3, #16
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d301      	bcc.n	8000e82 <__clzsi2+0xe>
 8000e7e:	0c00      	lsrs	r0, r0, #16
 8000e80:	3910      	subs	r1, #16
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	4298      	cmp	r0, r3
 8000e86:	d301      	bcc.n	8000e8c <__clzsi2+0x18>
 8000e88:	0a00      	lsrs	r0, r0, #8
 8000e8a:	3908      	subs	r1, #8
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	4298      	cmp	r0, r3
 8000e90:	d301      	bcc.n	8000e96 <__clzsi2+0x22>
 8000e92:	0900      	lsrs	r0, r0, #4
 8000e94:	3904      	subs	r1, #4
 8000e96:	a202      	add	r2, pc, #8	@ (adr r2, 8000ea0 <__clzsi2+0x2c>)
 8000e98:	5c10      	ldrb	r0, [r2, r0]
 8000e9a:	1840      	adds	r0, r0, r1
 8000e9c:	4770      	bx	lr
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	02020304 	.word	0x02020304
 8000ea4:	01010101 	.word	0x01010101
	...

08000eb0 <ConfigAdc>:
 *      Author: PDS-User
 */
#include "adcFile.h"

void ConfigAdc(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	RCC->APBENR2 = RCC_APBENR2_ADCEN;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <ConfigAdc+0x6c>)
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	0352      	lsls	r2, r2, #13
 8000ebc:	641a      	str	r2, [r3, #64]	@ 0x40
	ADC1->CR = ADC_CR_ADVREGEN;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <ConfigAdc+0x70>)
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	0552      	lsls	r2, r2, #21
 8000ec4:	609a      	str	r2, [r3, #8]
	for(unsigned int i = 0; i < 65535; i++);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e002      	b.n	8000ed2 <ConfigAdc+0x22>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a13      	ldr	r2, [pc, #76]	@ (8000f24 <ConfigAdc+0x74>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d9f8      	bls.n	8000ecc <ConfigAdc+0x1c>
	ADC1->CR |= ADC_CR_ADCAL;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <ConfigAdc+0x70>)
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <ConfigAdc+0x70>)
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	0609      	lsls	r1, r1, #24
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	609a      	str	r2, [r3, #8]
	while(ADC1->CR & ADC_CR_ADCAL);
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <ConfigAdc+0x70>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	dbfb      	blt.n	8000eea <ConfigAdc+0x3a>
	ADC1->CR |= ADC_CR_ADEN;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <ConfigAdc+0x70>)
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <ConfigAdc+0x70>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	609a      	str	r2, [r3, #8]
	ChannelConfigurationReadyFlag();
 8000efe:	f000 f815 	bl	8000f2c <ChannelConfigurationReadyFlag>
	ADC1->CFGR1 &= ~ADC_CFGR1_CHSELRMOD;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <ConfigAdc+0x70>)
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <ConfigAdc+0x70>)
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <ConfigAdc+0x78>)
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	60da      	str	r2, [r3, #12]
	ChannelConfigurationReadyFlag();
 8000f0e:	f000 f80d 	bl	8000f2c <ChannelConfigurationReadyFlag>

}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40012400 	.word	0x40012400
 8000f24:	0000fffe 	.word	0x0000fffe
 8000f28:	ffdfffff 	.word	0xffdfffff

08000f2c <ChannelConfigurationReadyFlag>:


void ChannelConfigurationReadyFlag(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <ChannelConfigurationReadyFlag+0x18>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d0fa      	beq.n	8000f32 <ChannelConfigurationReadyFlag+0x6>
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40012400 	.word	0x40012400

08000f48 <ReadAdc>:

int ReadAdc(int channel)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	ADC1->CHSELR = (1 << channel);
 8000f50:	2201      	movs	r2, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	409a      	lsls	r2, r3
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <ReadAdc+0x40>)
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28
	ChannelConfigurationReadyFlag();
 8000f5a:	f7ff ffe7 	bl	8000f2c <ChannelConfigurationReadyFlag>
	ADC1->CR |= ADC_CR_ADSTART;
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <ReadAdc+0x40>)
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <ReadAdc+0x40>)
 8000f64:	2104      	movs	r1, #4
 8000f66:	430a      	orrs	r2, r1
 8000f68:	609a      	str	r2, [r3, #8]
	while(ADC1->CR & ADC_CR_ADSTART);
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <ReadAdc+0x40>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2204      	movs	r2, #4
 8000f72:	4013      	ands	r3, r2
 8000f74:	d1fa      	bne.n	8000f6c <ReadAdc+0x24>
	ADC1->CHSELR = 0;
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <ReadAdc+0x40>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
	return ADC1->DR;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	@ (8000f88 <ReadAdc+0x40>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40012400 	.word	0x40012400

08000f8c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	uint16_t pwmBoost = 0;
 8000f92:	2316      	movs	r3, #22
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	2200      	movs	r2, #0
 8000f98:	801a      	strh	r2, [r3, #0]
	uint16_t pwmBuck = MAXIMUM_PWM;
 8000f9a:	2314      	movs	r3, #20
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	22c8      	movs	r2, #200	@ 0xc8
 8000fa0:	0052      	lsls	r2, r2, #1
 8000fa2:	801a      	strh	r2, [r3, #0]
	uint8_t estado = 0;
 8000fa4:	2313      	movs	r3, #19
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	float voltage12V = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
	float voltage3dot7V = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
	float outputVoltage = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb8:	f000 fa19 	bl	80013ee <HAL_Init>

	/* USER CODE BEGIN Init */
	ConfigAdc();
 8000fbc:	f7ff ff78 	bl	8000eb0 <ConfigAdc>
	PwmConfig();
 8000fc0:	f000 f956 	bl	8001270 <PwmConfig>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc4:	f000 f90a 	bl	80011dc <SystemClock_Config>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		voltage12V = ReadAdc(INPUT_VOLTAGE) * FACTOR_VOLTAGE;
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ffbd 	bl	8000f48 <ReadAdc>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff fe55 	bl	8000c80 <__aeabi_i2d>
 8000fd6:	4a7a      	ldr	r2, [pc, #488]	@ (80011c0 <main+0x234>)
 8000fd8:	4b7a      	ldr	r3, [pc, #488]	@ (80011c4 <main+0x238>)
 8000fda:	f7ff fb89 	bl	80006f0 <__aeabi_dmul>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	000b      	movs	r3, r1
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	f7ff fec1 	bl	8000d6c <__aeabi_d2f>
 8000fea:	1c03      	adds	r3, r0, #0
 8000fec:	60fb      	str	r3, [r7, #12]
		//voltage3dot7V = ReadAdc(BATTERY_VOLTAGE) * FACTOR_VOLTAGE - 0.6;

		switch(estado)
 8000fee:	2313      	movs	r3, #19
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d100      	bne.n	8000ffa <main+0x6e>
 8000ff8:	e091      	b.n	800111e <main+0x192>
 8000ffa:	dce5      	bgt.n	8000fc8 <main+0x3c>
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <main+0x7a>
 8001000:	2b01      	cmp	r3, #1
 8001002:	d01e      	beq.n	8001042 <main+0xb6>
 8001004:	e0da      	b.n	80011bc <main+0x230>
		{
		case 0:

			if(voltage12V < LOW_VOLTAGE)
 8001006:	4970      	ldr	r1, [pc, #448]	@ (80011c8 <main+0x23c>)
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff f959 	bl	80002c0 <__aeabi_fcmplt>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d007      	beq.n	8001022 <main+0x96>
			{
				estado = 1;
 8001012:	2313      	movs	r3, #19
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
				TIM1->CCR2 = 0; //Boost
 800101a:	4b6c      	ldr	r3, [pc, #432]	@ (80011cc <main+0x240>)
 800101c:	2200      	movs	r2, #0
 800101e:	639a      	str	r2, [r3, #56]	@ 0x38
			else if(voltage12V > HIGH_VOLTAGE)
			{
				estado = 2;
				TIM1->CCR1 = MAXIMUM_PWM;	//Buck
			}
			break;
 8001020:	e0cc      	b.n	80011bc <main+0x230>
			else if(voltage12V > HIGH_VOLTAGE)
 8001022:	496b      	ldr	r1, [pc, #428]	@ (80011d0 <main+0x244>)
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff f95f 	bl	80002e8 <__aeabi_fcmpgt>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d100      	bne.n	8001030 <main+0xa4>
			break;
 800102e:	e0c5      	b.n	80011bc <main+0x230>
				estado = 2;
 8001030:	2313      	movs	r3, #19
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2202      	movs	r2, #2
 8001036:	701a      	strb	r2, [r3, #0]
				TIM1->CCR1 = MAXIMUM_PWM;	//Buck
 8001038:	4b64      	ldr	r3, [pc, #400]	@ (80011cc <main+0x240>)
 800103a:	22c8      	movs	r2, #200	@ 0xc8
 800103c:	0052      	lsls	r2, r2, #1
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001040:	e0bc      	b.n	80011bc <main+0x230>

		case 1:

			TIM1->CCR1 = 400;
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <main+0x240>)
 8001044:	22c8      	movs	r2, #200	@ 0xc8
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	635a      	str	r2, [r3, #52]	@ 0x34
			voltage3dot7V = ReadAdc(BATTERY_VOLTAGE) * FACTOR_VOLTAGE;
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff7c 	bl	8000f48 <ReadAdc>
 8001050:	0003      	movs	r3, r0
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff fe14 	bl	8000c80 <__aeabi_i2d>
 8001058:	4a59      	ldr	r2, [pc, #356]	@ (80011c0 <main+0x234>)
 800105a:	4b5a      	ldr	r3, [pc, #360]	@ (80011c4 <main+0x238>)
 800105c:	f7ff fb48 	bl	80006f0 <__aeabi_dmul>
 8001060:	0002      	movs	r2, r0
 8001062:	000b      	movs	r3, r1
 8001064:	0010      	movs	r0, r2
 8001066:	0019      	movs	r1, r3
 8001068:	f7ff fe80 	bl	8000d6c <__aeabi_d2f>
 800106c:	1c03      	adds	r3, r0, #0
 800106e:	60bb      	str	r3, [r7, #8]
			if(voltage3dot7V > 3.2)
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f7ff fe33 	bl	8000cdc <__aeabi_f2d>
 8001076:	4a57      	ldr	r2, [pc, #348]	@ (80011d4 <main+0x248>)
 8001078:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <main+0x24c>)
 800107a:	f7ff f8fb 	bl	8000274 <__aeabi_dcmpgt>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d03b      	beq.n	80010fa <main+0x16e>
			{
				outputVoltage = ReadAdc(OUTPUT_VOLTAGE) * FACTOR_VOLTAGE;
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff ff60 	bl	8000f48 <ReadAdc>
 8001088:	0003      	movs	r3, r0
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff fdf8 	bl	8000c80 <__aeabi_i2d>
 8001090:	4a4b      	ldr	r2, [pc, #300]	@ (80011c0 <main+0x234>)
 8001092:	4b4c      	ldr	r3, [pc, #304]	@ (80011c4 <main+0x238>)
 8001094:	f7ff fb2c 	bl	80006f0 <__aeabi_dmul>
 8001098:	0002      	movs	r2, r0
 800109a:	000b      	movs	r3, r1
 800109c:	0010      	movs	r0, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	f7ff fe64 	bl	8000d6c <__aeabi_d2f>
 80010a4:	1c03      	adds	r3, r0, #0
 80010a6:	607b      	str	r3, [r7, #4]
				if((outputVoltage < 5) && pwmBoost < 400)
 80010a8:	4947      	ldr	r1, [pc, #284]	@ (80011c8 <main+0x23c>)
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff f908 	bl	80002c0 <__aeabi_fcmplt>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d00c      	beq.n	80010ce <main+0x142>
 80010b4:	2116      	movs	r1, #22
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	23c8      	movs	r3, #200	@ 0xc8
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	429a      	cmp	r2, r3
 80010c0:	d205      	bcs.n	80010ce <main+0x142>
				{
					pwmBoost++;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	3201      	adds	r2, #1
 80010ca:	801a      	strh	r2, [r3, #0]
 80010cc:	e00f      	b.n	80010ee <main+0x162>
				}
				else if((outputVoltage > 5) && pwmBoost > 0)
 80010ce:	493e      	ldr	r1, [pc, #248]	@ (80011c8 <main+0x23c>)
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff f909 	bl	80002e8 <__aeabi_fcmpgt>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d009      	beq.n	80010ee <main+0x162>
 80010da:	2116      	movs	r1, #22
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <main+0x162>
				{
					pwmBoost--;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	881a      	ldrh	r2, [r3, #0]
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	3a01      	subs	r2, #1
 80010ec:	801a      	strh	r2, [r3, #0]
				}
				TIM1->CCR2 = pwmBoost;
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <main+0x240>)
 80010f0:	2216      	movs	r2, #22
 80010f2:	18ba      	adds	r2, r7, r2
 80010f4:	8812      	ldrh	r2, [r2, #0]
 80010f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f8:	e002      	b.n	8001100 <main+0x174>
			}
			else
			{
				TIM1->CCR2 = 0;
 80010fa:	4b34      	ldr	r3, [pc, #208]	@ (80011cc <main+0x240>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	639a      	str	r2, [r3, #56]	@ 0x38
			}

			if(voltage12V > HIGH_VOLTAGE)
 8001100:	4933      	ldr	r1, [pc, #204]	@ (80011d0 <main+0x244>)
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff f8f0 	bl	80002e8 <__aeabi_fcmpgt>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d100      	bne.n	800110e <main+0x182>
			{
				estado = 2;
				TIM1->CCR2 = 0;
			}

			break;
 800110c:	e056      	b.n	80011bc <main+0x230>
				estado = 2;
 800110e:	2313      	movs	r3, #19
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	2202      	movs	r2, #2
 8001114:	701a      	strb	r2, [r3, #0]
				TIM1->CCR2 = 0;
 8001116:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <main+0x240>)
 8001118:	2200      	movs	r2, #0
 800111a:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800111c:	e04e      	b.n	80011bc <main+0x230>

		case 2:

			TIM1->CCR2 = 0;
 800111e:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <main+0x240>)
 8001120:	2200      	movs	r2, #0
 8001122:	639a      	str	r2, [r3, #56]	@ 0x38
			outputVoltage = ReadAdc(OUTPUT_VOLTAGE) * FACTOR_VOLTAGE;
 8001124:	2004      	movs	r0, #4
 8001126:	f7ff ff0f 	bl	8000f48 <ReadAdc>
 800112a:	0003      	movs	r3, r0
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fda7 	bl	8000c80 <__aeabi_i2d>
 8001132:	4a23      	ldr	r2, [pc, #140]	@ (80011c0 <main+0x234>)
 8001134:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <main+0x238>)
 8001136:	f7ff fadb 	bl	80006f0 <__aeabi_dmul>
 800113a:	0002      	movs	r2, r0
 800113c:	000b      	movs	r3, r1
 800113e:	0010      	movs	r0, r2
 8001140:	0019      	movs	r1, r3
 8001142:	f7ff fe13 	bl	8000d6c <__aeabi_d2f>
 8001146:	1c03      	adds	r3, r0, #0
 8001148:	607b      	str	r3, [r7, #4]
			if((outputVoltage > 5) && pwmBuck > 0)
 800114a:	491f      	ldr	r1, [pc, #124]	@ (80011c8 <main+0x23c>)
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f8cb 	bl	80002e8 <__aeabi_fcmpgt>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d00b      	beq.n	800116e <main+0x1e2>
 8001156:	2214      	movs	r2, #20
 8001158:	18bb      	adds	r3, r7, r2
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <main+0x1e2>
			{
				pwmBuck--;
 8001160:	0011      	movs	r1, r2
 8001162:	18bb      	adds	r3, r7, r2
 8001164:	881a      	ldrh	r2, [r3, #0]
 8001166:	187b      	adds	r3, r7, r1
 8001168:	3a01      	subs	r2, #1
 800116a:	801a      	strh	r2, [r3, #0]
 800116c:	e011      	b.n	8001192 <main+0x206>
			}
			else if((outputVoltage < 5) && pwmBuck < 400)
 800116e:	4916      	ldr	r1, [pc, #88]	@ (80011c8 <main+0x23c>)
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f8a5 	bl	80002c0 <__aeabi_fcmplt>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d00b      	beq.n	8001192 <main+0x206>
 800117a:	2114      	movs	r1, #20
 800117c:	187b      	adds	r3, r7, r1
 800117e:	881a      	ldrh	r2, [r3, #0]
 8001180:	23c8      	movs	r3, #200	@ 0xc8
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	429a      	cmp	r2, r3
 8001186:	d204      	bcs.n	8001192 <main+0x206>
			{
				pwmBuck++;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	881a      	ldrh	r2, [r3, #0]
 800118c:	187b      	adds	r3, r7, r1
 800118e:	3201      	adds	r2, #1
 8001190:	801a      	strh	r2, [r3, #0]
			}
			TIM1->CCR1 = pwmBuck;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <main+0x240>)
 8001194:	2214      	movs	r2, #20
 8001196:	18ba      	adds	r2, r7, r2
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	635a      	str	r2, [r3, #52]	@ 0x34
			if(voltage12V < LOW_VOLTAGE)
 800119c:	490a      	ldr	r1, [pc, #40]	@ (80011c8 <main+0x23c>)
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff f88e 	bl	80002c0 <__aeabi_fcmplt>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d100      	bne.n	80011aa <main+0x21e>
			{
				estado = 1;
				TIM1->CCR1 = MAXIMUM_PWM;
			}
			break;
 80011a8:	e007      	b.n	80011ba <main+0x22e>
				estado = 1;
 80011aa:	2313      	movs	r3, #19
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
				TIM1->CCR1 = MAXIMUM_PWM;
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <main+0x240>)
 80011b4:	22c8      	movs	r2, #200	@ 0xc8
 80011b6:	0052      	lsls	r2, r2, #1
 80011b8:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80011ba:	46c0      	nop			@ (mov r8, r8)
		voltage12V = ReadAdc(INPUT_VOLTAGE) * FACTOR_VOLTAGE;
 80011bc:	e704      	b.n	8000fc8 <main+0x3c>
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	11f0c34c 	.word	0x11f0c34c
 80011c4:	3f822531 	.word	0x3f822531
 80011c8:	40a00000 	.word	0x40a00000
 80011cc:	40012c00 	.word	0x40012c00
 80011d0:	40b00000 	.word	0x40b00000
 80011d4:	9999999a 	.word	0x9999999a
 80011d8:	40099999 	.word	0x40099999

080011dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08d      	sub	sp, #52	@ 0x34
 80011e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	2414      	movs	r4, #20
 80011e4:	193b      	adds	r3, r7, r4
 80011e6:	0018      	movs	r0, r3
 80011e8:	231c      	movs	r3, #28
 80011ea:	001a      	movs	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	f000 fd5f 	bl	8001cb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f2:	003b      	movs	r3, r7
 80011f4:	0018      	movs	r0, r3
 80011f6:	2314      	movs	r3, #20
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f000 fd58 	bl	8001cb0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	193b      	adds	r3, r7, r4
 8001202:	2202      	movs	r2, #2
 8001204:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	193b      	adds	r3, r7, r4
 8001208:	2280      	movs	r2, #128	@ 0x80
 800120a:	0052      	lsls	r2, r2, #1
 800120c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800120e:	193b      	adds	r3, r7, r4
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	193b      	adds	r3, r7, r4
 8001216:	2240      	movs	r2, #64	@ 0x40
 8001218:	615a      	str	r2, [r3, #20]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	193b      	adds	r3, r7, r4
 800121c:	0018      	movs	r0, r3
 800121e:	f000 fa17 	bl	8001650 <HAL_RCC_OscConfig>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x4e>
	{
		Error_Handler();
 8001226:	f000 f81c 	bl	8001262 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	003b      	movs	r3, r7
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001230:	003b      	movs	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	003b      	movs	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001242:	003b      	movs	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001248:	003b      	movs	r3, r7
 800124a:	2101      	movs	r1, #1
 800124c:	0018      	movs	r0, r3
 800124e:	f000 fbe3 	bl	8001a18 <HAL_RCC_ClockConfig>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8001256:	f000 f804 	bl	8001262 <Error_Handler>
	}
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b00d      	add	sp, #52	@ 0x34
 8001260:	bd90      	pop	{r4, r7, pc}

08001262 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001266:	b672      	cpsid	i
}
 8001268:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	e7fd      	b.n	800126a <Error_Handler+0x8>
	...

08001270 <PwmConfig>:
// TIMx_CCER - Polaridade do pino
// TIMx_BDTR - Aciona a saída OCx
// TIMx_CNT - Contador de tempo

void PwmConfig(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	RCC->IOPENR = RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN;
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <PwmConfig+0x80>)
 8001276:	2203      	movs	r2, #3
 8001278:	635a      	str	r2, [r3, #52]	@ 0x34
	GPIOA->MODER &= ~(1 << MODE_GPIOA7_TIM1_CH1N);
 800127a:	23a0      	movs	r3, #160	@ 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	23a0      	movs	r3, #160	@ 0xa0
 8001282:	05db      	lsls	r3, r3, #23
 8001284:	491b      	ldr	r1, [pc, #108]	@ (80012f4 <PwmConfig+0x84>)
 8001286:	400a      	ands	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] = GPIO_AFRL_AFSEL7_1;
 800128a:	23a0      	movs	r3, #160	@ 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2280      	movs	r2, #128	@ 0x80
 8001290:	0592      	lsls	r2, r2, #22
 8001292:	621a      	str	r2, [r3, #32]
	GPIOB->MODER &= ~(1 << MODE_GPIOB0_TIM1_CH2N);
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <PwmConfig+0x88>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <PwmConfig+0x88>)
 800129a:	2101      	movs	r1, #1
 800129c:	438a      	bics	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[0] = GPIO_AFRL_AFSEL0_1;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <PwmConfig+0x88>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	621a      	str	r2, [r3, #32]
	RCC->APBENR2 |= RCC_APBENR2_TIM1EN;	// Enable TIM1 peripheral
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <PwmConfig+0x80>)
 80012a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <PwmConfig+0x80>)
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	0109      	lsls	r1, r1, #4
 80012b0:	430a      	orrs	r2, r1
 80012b2:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM1->CCMR1 = TIM_CCMR1_OC1PE | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 |
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <PwmConfig+0x8c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <PwmConfig+0x90>)
 80012b8:	619a      	str	r2, [r3, #24]
				  TIM_CCMR1_OC2PE | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
	TIM1->CCER = TIM_CCER_CC1NE | TIM_CCER_CC2NE;
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <PwmConfig+0x8c>)
 80012bc:	2244      	movs	r2, #68	@ 0x44
 80012be:	621a      	str	r2, [r3, #32]
	TIM1->BDTR = TIM_BDTR_MOE | TIM_BDTR_BKP | TIM_BDTR_BK2P ;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <PwmConfig+0x8c>)
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <PwmConfig+0x94>)
 80012c4:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->ARR = 400;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <PwmConfig+0x8c>)
 80012c8:	22c8      	movs	r2, #200	@ 0xc8
 80012ca:	0052      	lsls	r2, r2, #1
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR1 = 400;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <PwmConfig+0x8c>)
 80012d0:	22c8      	movs	r2, #200	@ 0xc8
 80012d2:	0052      	lsls	r2, r2, #1
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <PwmConfig+0x8c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->EGR = TIM_EGR_UG;
 80012dc:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <PwmConfig+0x8c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	615a      	str	r2, [r3, #20]
	TIM1->CR1 = TIM_CR1_CEN;
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <PwmConfig+0x8c>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	40021000 	.word	0x40021000
 80012f4:	ffffbfff 	.word	0xffffbfff
 80012f8:	50000400 	.word	0x50000400
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	00006868 	.word	0x00006868
 8001304:	0200a000 	.word	0x0200a000

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	2101      	movs	r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	2201      	movs	r2, #1
 8001320:	4013      	ands	r3, r2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	0549      	lsls	r1, r1, #21
 8001330:	430a      	orrs	r2, r1
 8001332:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <HAL_MspInit+0x44>)
 8001336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	055b      	lsls	r3, r3, #21
 800133c:	4013      	ands	r3, r2
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	40021000 	.word	0x40021000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	e7fd      	b.n	8001354 <NMI_Handler+0x4>

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	e7fd      	b.n	800135c <HardFault_Handler+0x4>

08001360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 f89a 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <SystemInit+0x14>)
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	0512      	lsls	r2, r2, #20
 800138e:	609a      	str	r2, [r3, #8]
#endif
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:
 800139c:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <LoopForever+0x2>)
 800139e:	4685      	mov	sp, r0
 80013a0:	f7ff fff0 	bl	8001384 <SystemInit>
 80013a4:	2100      	movs	r1, #0
 80013a6:	e003      	b.n	80013b0 <LoopCopyDataInit>

080013a8 <CopyDataInit>:
 80013a8:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <LoopForever+0x6>)
 80013aa:	585b      	ldr	r3, [r3, r1]
 80013ac:	5043      	str	r3, [r0, r1]
 80013ae:	3104      	adds	r1, #4

080013b0 <LoopCopyDataInit>:
 80013b0:	480a      	ldr	r0, [pc, #40]	@ (80013dc <LoopForever+0xa>)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <LoopForever+0xe>)
 80013b4:	1842      	adds	r2, r0, r1
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d3f6      	bcc.n	80013a8 <CopyDataInit>
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <LoopForever+0x12>)
 80013bc:	e002      	b.n	80013c4 <LoopFillZerobss>

080013be <FillZerobss>:
 80013be:	2300      	movs	r3, #0
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	3204      	adds	r2, #4

080013c4 <LoopFillZerobss>:
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <LoopForever+0x16>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3f9      	bcc.n	80013be <FillZerobss>
 80013ca:	f000 fc79 	bl	8001cc0 <__libc_init_array>
 80013ce:	f7ff fddd 	bl	8000f8c <main>

080013d2 <LoopForever>:
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
 80013d4:	20003000 	.word	0x20003000
 80013d8:	08001d68 	.word	0x08001d68
 80013dc:	20000000 	.word	0x20000000
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	2000000c 	.word	0x2000000c
 80013e8:	2000002c 	.word	0x2000002c

080013ec <ADC1_IRQHandler>:
 80013ec:	e7fe      	b.n	80013ec <ADC1_IRQHandler>

080013ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 f80e 	bl	800141c <HAL_InitTick>
 8001400:	1e03      	subs	r3, r0, #0
 8001402:	d003      	beq.n	800140c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	e001      	b.n	8001410 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800140c:	f7ff ff7c 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	230f      	movs	r3, #15
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <HAL_InitTick+0x88>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d02b      	beq.n	800148c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <HAL_InitTick+0x8c>)
 8001436:	681c      	ldr	r4, [r3, #0]
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_InitTick+0x88>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	0019      	movs	r1, r3
 800143e:	23fa      	movs	r3, #250	@ 0xfa
 8001440:	0098      	lsls	r0, r3, #2
 8001442:	f7fe fe61 	bl	8000108 <__udivsi3>
 8001446:	0003      	movs	r3, r0
 8001448:	0019      	movs	r1, r3
 800144a:	0020      	movs	r0, r4
 800144c:	f7fe fe5c 	bl	8000108 <__udivsi3>
 8001450:	0003      	movs	r3, r0
 8001452:	0018      	movs	r0, r3
 8001454:	f000 f8ef 	bl	8001636 <HAL_SYSTICK_Config>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d112      	bne.n	8001482 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d80a      	bhi.n	8001478 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2301      	movs	r3, #1
 8001466:	425b      	negs	r3, r3
 8001468:	2200      	movs	r2, #0
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f8ce 	bl	800160c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_InitTick+0x90>)
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e00d      	b.n	8001494 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e008      	b.n	8001494 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001482:	230f      	movs	r3, #15
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e003      	b.n	8001494 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800148c:	230f      	movs	r3, #15
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	781b      	ldrb	r3, [r3, #0]
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b005      	add	sp, #20
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x1c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	001a      	movs	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_IncTick+0x20>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	18d2      	adds	r2, r2, r3
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <HAL_IncTick+0x20>)
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000028 	.word	0x20000028

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b02      	ldr	r3, [pc, #8]	@ (80014e4 <HAL_GetTick+0x10>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	20000028 	.word	0x20000028

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	0002      	movs	r2, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80014fc:	d828      	bhi.n	8001550 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fe:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <__NVIC_SetPriority+0xd4>)
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b25b      	sxtb	r3, r3
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	33c0      	adds	r3, #192	@ 0xc0
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	589b      	ldr	r3, [r3, r2]
 800150e:	1dfa      	adds	r2, r7, #7
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	0011      	movs	r1, r2
 8001514:	2203      	movs	r2, #3
 8001516:	400a      	ands	r2, r1
 8001518:	00d2      	lsls	r2, r2, #3
 800151a:	21ff      	movs	r1, #255	@ 0xff
 800151c:	4091      	lsls	r1, r2
 800151e:	000a      	movs	r2, r1
 8001520:	43d2      	mvns	r2, r2
 8001522:	401a      	ands	r2, r3
 8001524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	22ff      	movs	r2, #255	@ 0xff
 800152c:	401a      	ands	r2, r3
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	2303      	movs	r3, #3
 8001536:	4003      	ands	r3, r0
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153c:	481f      	ldr	r0, [pc, #124]	@ (80015bc <__NVIC_SetPriority+0xd4>)
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b25b      	sxtb	r3, r3
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	430a      	orrs	r2, r1
 8001548:	33c0      	adds	r3, #192	@ 0xc0
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800154e:	e031      	b.n	80015b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <__NVIC_SetPriority+0xd8>)
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	0019      	movs	r1, r3
 8001558:	230f      	movs	r3, #15
 800155a:	400b      	ands	r3, r1
 800155c:	3b08      	subs	r3, #8
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3306      	adds	r3, #6
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	3304      	adds	r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1dfa      	adds	r2, r7, #7
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	0011      	movs	r1, r2
 8001570:	2203      	movs	r2, #3
 8001572:	400a      	ands	r2, r1
 8001574:	00d2      	lsls	r2, r2, #3
 8001576:	21ff      	movs	r1, #255	@ 0xff
 8001578:	4091      	lsls	r1, r2
 800157a:	000a      	movs	r2, r1
 800157c:	43d2      	mvns	r2, r2
 800157e:	401a      	ands	r2, r3
 8001580:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	22ff      	movs	r2, #255	@ 0xff
 8001588:	401a      	ands	r2, r3
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	0018      	movs	r0, r3
 8001590:	2303      	movs	r3, #3
 8001592:	4003      	ands	r3, r0
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001598:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <__NVIC_SetPriority+0xd8>)
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	001c      	movs	r4, r3
 80015a0:	230f      	movs	r3, #15
 80015a2:	4023      	ands	r3, r4
 80015a4:	3b08      	subs	r3, #8
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	430a      	orrs	r2, r1
 80015aa:	3306      	adds	r3, #6
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	18c3      	adds	r3, r0, r3
 80015b0:	3304      	adds	r3, #4
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	46c0      	nop			@ (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b003      	add	sp, #12
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	1e5a      	subs	r2, r3, #1
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	045b      	lsls	r3, r3, #17
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d301      	bcc.n	80015dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d8:	2301      	movs	r3, #1
 80015da:	e010      	b.n	80015fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <SysTick_Config+0x44>)
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	3a01      	subs	r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e4:	2301      	movs	r3, #1
 80015e6:	425b      	negs	r3, r3
 80015e8:	2103      	movs	r1, #3
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff ff7c 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <SysTick_Config+0x44>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <SysTick_Config+0x44>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	210f      	movs	r1, #15
 8001618:	187b      	adds	r3, r7, r1
 800161a:	1c02      	adds	r2, r0, #0
 800161c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	187b      	adds	r3, r7, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b25b      	sxtb	r3, r3
 8001626:	0011      	movs	r1, r2
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff ffbf 	bl	80015c4 <SysTick_Config>
 8001646:	0003      	movs	r3, r0
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e1d0      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2201      	movs	r2, #1
 8001668:	4013      	ands	r3, r2
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x1e>
 800166c:	e069      	b.n	8001742 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166e:	4bc8      	ldr	r3, [pc, #800]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2238      	movs	r2, #56	@ 0x38
 8001674:	4013      	ands	r3, r2
 8001676:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d105      	bne.n	800168a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d15d      	bne.n	8001742 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1bc      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	429a      	cmp	r2, r3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_OscConfig+0x56>
 8001696:	4bbe      	ldr	r3, [pc, #760]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4bbd      	ldr	r3, [pc, #756]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	0249      	lsls	r1, r1, #9
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e020      	b.n	80016e8 <HAL_RCC_OscConfig+0x98>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	23a0      	movs	r3, #160	@ 0xa0
 80016ac:	02db      	lsls	r3, r3, #11
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d10e      	bne.n	80016d0 <HAL_RCC_OscConfig+0x80>
 80016b2:	4bb7      	ldr	r3, [pc, #732]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4bb6      	ldr	r3, [pc, #728]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	02c9      	lsls	r1, r1, #11
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	4bb3      	ldr	r3, [pc, #716]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4bb2      	ldr	r3, [pc, #712]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	0249      	lsls	r1, r1, #9
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x98>
 80016d0:	4baf      	ldr	r3, [pc, #700]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4bae      	ldr	r3, [pc, #696]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016d6:	49af      	ldr	r1, [pc, #700]	@ (8001994 <HAL_RCC_OscConfig+0x344>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	4bac      	ldr	r3, [pc, #688]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4bab      	ldr	r3, [pc, #684]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80016e2:	49ad      	ldr	r1, [pc, #692]	@ (8001998 <HAL_RCC_OscConfig+0x348>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d014      	beq.n	800171a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fef0 	bl	80014d4 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80016fa:	f7ff feeb 	bl	80014d4 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b64      	cmp	r3, #100	@ 0x64
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e17b      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170c:	4ba0      	ldr	r3, [pc, #640]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4013      	ands	r3, r2
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0xaa>
 8001718:	e013      	b.n	8001742 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fedb 	bl	80014d4 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001724:	f7ff fed6 	bl	80014d4 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	@ 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e166      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001736:	4b96      	ldr	r3, [pc, #600]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	@ 0x80
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0xfe>
 800174c:	e086      	b.n	800185c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174e:	4b90      	ldr	r3, [pc, #576]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2238      	movs	r2, #56	@ 0x38
 8001754:	4013      	ands	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d12f      	bne.n	80017be <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e14c      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	4b89      	ldr	r3, [pc, #548]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a8b      	ldr	r2, [pc, #556]	@ (800199c <HAL_RCC_OscConfig+0x34c>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	021a      	lsls	r2, r3, #8
 800177a:	4b85      	ldr	r3, [pc, #532]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d112      	bne.n	80017ac <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001786:	4b82      	ldr	r3, [pc, #520]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a85      	ldr	r2, [pc, #532]	@ (80019a0 <HAL_RCC_OscConfig+0x350>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	4b7e      	ldr	r3, [pc, #504]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800179a:	4b7d      	ldr	r3, [pc, #500]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0adb      	lsrs	r3, r3, #11
 80017a0:	2207      	movs	r2, #7
 80017a2:	4013      	ands	r3, r2
 80017a4:	4a7f      	ldr	r2, [pc, #508]	@ (80019a4 <HAL_RCC_OscConfig+0x354>)
 80017a6:	40da      	lsrs	r2, r3
 80017a8:	4b7f      	ldr	r3, [pc, #508]	@ (80019a8 <HAL_RCC_OscConfig+0x358>)
 80017aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017ac:	4b7f      	ldr	r3, [pc, #508]	@ (80019ac <HAL_RCC_OscConfig+0x35c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff fe33 	bl	800141c <HAL_InitTick>
 80017b6:	1e03      	subs	r3, r0, #0
 80017b8:	d050      	beq.n	800185c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e122      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d030      	beq.n	8001828 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017c6:	4b72      	ldr	r3, [pc, #456]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a75      	ldr	r2, [pc, #468]	@ (80019a0 <HAL_RCC_OscConfig+0x350>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80017da:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b6c      	ldr	r3, [pc, #432]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80017e0:	2180      	movs	r1, #128	@ 0x80
 80017e2:	0049      	lsls	r1, r1, #1
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fe74 	bl	80014d4 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fe6f 	bl	80014d4 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0ff      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001804:	4b62      	ldr	r3, [pc, #392]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4013      	ands	r3, r2
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b5f      	ldr	r3, [pc, #380]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a61      	ldr	r2, [pc, #388]	@ (800199c <HAL_RCC_OscConfig+0x34c>)
 8001816:	4013      	ands	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	021a      	lsls	r2, r3, #8
 8001820:	4b5b      	ldr	r3, [pc, #364]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e019      	b.n	800185c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800182e:	4960      	ldr	r1, [pc, #384]	@ (80019b0 <HAL_RCC_OscConfig+0x360>)
 8001830:	400a      	ands	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fe4e 	bl	80014d4 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800183e:	f7ff fe49 	bl	80014d4 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0d9      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001850:	4b4f      	ldr	r3, [pc, #316]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4013      	ands	r3, r2
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2208      	movs	r2, #8
 8001862:	4013      	ands	r3, r2
 8001864:	d042      	beq.n	80018ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2238      	movs	r2, #56	@ 0x38
 800186c:	4013      	ands	r3, r2
 800186e:	2b18      	cmp	r3, #24
 8001870:	d105      	bne.n	800187e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d138      	bne.n	80018ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0c2      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d019      	beq.n	80018ba <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001886:	4b42      	ldr	r3, [pc, #264]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001888:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fe1f 	bl	80014d4 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800189c:	f7ff fe1a 	bl	80014d4 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0aa      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d0f1      	beq.n	800189c <HAL_RCC_OscConfig+0x24c>
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018ba:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80018bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018be:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	438a      	bics	r2, r1
 80018c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fe05 	bl	80014d4 <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fe00 	bl	80014d4 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e090      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d1f1      	bne.n	80018d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2204      	movs	r2, #4
 80018f2:	4013      	ands	r3, r2
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2a8>
 80018f6:	e084      	b.n	8001a02 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f8:	230f      	movs	r3, #15
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2238      	movs	r2, #56	@ 0x38
 8001906:	4013      	ands	r3, r2
 8001908:	2b20      	cmp	r3, #32
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d000      	beq.n	8001916 <HAL_RCC_OscConfig+0x2c6>
 8001914:	e075      	b.n	8001a02 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e074      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x2e0>
 8001922:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001924:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800192e:	e01c      	b.n	800196a <HAL_RCC_OscConfig+0x31a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x302>
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800193a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800193c:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800193e:	2104      	movs	r1, #4
 8001940:	430a      	orrs	r2, r1
 8001942:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001946:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x31a>
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001958:	2101      	movs	r1, #1
 800195a:	438a      	bics	r2, r1
 800195c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800195e:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_OscConfig+0x340>)
 8001964:	2104      	movs	r1, #4
 8001966:	438a      	bics	r2, r1
 8001968:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d028      	beq.n	80019c4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fdaf 	bl	80014d4 <HAL_GetTick>
 8001976:	0003      	movs	r3, r0
 8001978:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff fdaa 	bl	80014d4 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <HAL_RCC_OscConfig+0x364>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d915      	bls.n	80019b8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e039      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
 8001990:	40021000 	.word	0x40021000
 8001994:	fffeffff 	.word	0xfffeffff
 8001998:	fffbffff 	.word	0xfffbffff
 800199c:	ffff80ff 	.word	0xffff80ff
 80019a0:	ffffc7ff 	.word	0xffffc7ff
 80019a4:	02dc6c00 	.word	0x02dc6c00
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004
 80019b0:	fffffeff 	.word	0xfffffeff
 80019b4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_RCC_OscConfig+0x3bc>)
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	2202      	movs	r2, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	d0dc      	beq.n	800197c <HAL_RCC_OscConfig+0x32c>
 80019c2:	e013      	b.n	80019ec <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fd86 	bl	80014d4 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80019cc:	e009      	b.n	80019e2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fd81 	bl	80014d4 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <HAL_RCC_OscConfig+0x3c0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e010      	b.n	8001a04 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_RCC_OscConfig+0x3bc>)
 80019e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e6:	2202      	movs	r2, #2
 80019e8:	4013      	ands	r3, r2
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_OscConfig+0x3bc>)
 80019f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <HAL_RCC_OscConfig+0x3bc>)
 80019fc:	4905      	ldr	r1, [pc, #20]	@ (8001a14 <HAL_RCC_OscConfig+0x3c4>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b006      	add	sp, #24
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	00001388 	.word	0x00001388
 8001a14:	efffffff 	.word	0xefffffff

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0e9      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b76      	ldr	r3, [pc, #472]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2207      	movs	r2, #7
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d91e      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b73      	ldr	r3, [pc, #460]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2207      	movs	r2, #7
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b70      	ldr	r3, [pc, #448]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff fd42 	bl	80014d4 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a56:	f7ff fd3d 	bl	80014d4 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a6a      	ldr	r2, [pc, #424]	@ (8001c0c <HAL_RCC_ClockConfig+0x1f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0ca      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a6a:	4b67      	ldr	r3, [pc, #412]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2207      	movs	r2, #7
 8001a70:	4013      	ands	r3, r2
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d017      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a8c:	4b60      	ldr	r3, [pc, #384]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a60      	ldr	r2, [pc, #384]	@ (8001c14 <HAL_RCC_ClockConfig+0x1fc>)
 8001a92:	401a      	ands	r2, r3
 8001a94:	4b5e      	ldr	r3, [pc, #376]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001a96:	21b0      	movs	r1, #176	@ 0xb0
 8001a98:	0109      	lsls	r1, r1, #4
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c18 <HAL_RCC_ClockConfig+0x200>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	4b58      	ldr	r3, [pc, #352]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d055      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001abc:	4b54      	ldr	r3, [pc, #336]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	221c      	movs	r2, #28
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	4b51      	ldr	r3, [pc, #324]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d11f      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e08b      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4013      	ands	r3, r2
 8001afa:	d113      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e07f      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b08:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d108      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e074      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b16:	4b3e      	ldr	r3, [pc, #248]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e06d      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b24:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2207      	movs	r2, #7
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4b37      	ldr	r3, [pc, #220]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b38:	f7ff fccc 	bl	80014d4 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b40:	e009      	b.n	8001b56 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b42:	f7ff fcc7 	bl	80014d4 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c0c <HAL_RCC_ClockConfig+0x1f4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e054      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b2e      	ldr	r3, [pc, #184]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2238      	movs	r2, #56	@ 0x38
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1ec      	bne.n	8001b42 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b68:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	4013      	ands	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d21e      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b88:	f7ff fca4 	bl	80014d4 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7ff fc9f 	bl	80014d4 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c0c <HAL_RCC_ClockConfig+0x1f4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e02c      	b.n	8001c00 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2207      	movs	r2, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1ee      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4a16      	ldr	r2, [pc, #88]	@ (8001c1c <HAL_RCC_ClockConfig+0x204>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bd2:	f000 f82b 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bd6:	0001      	movs	r1, r0
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	220f      	movs	r2, #15
 8001be0:	401a      	ands	r2, r3
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_RCC_ClockConfig+0x208>)
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	58d3      	ldr	r3, [r2, r3]
 8001be8:	221f      	movs	r2, #31
 8001bea:	4013      	ands	r3, r2
 8001bec:	000a      	movs	r2, r1
 8001bee:	40da      	lsrs	r2, r3
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_RCC_ClockConfig+0x20c>)
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_RCC_ClockConfig+0x210>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fc0f 	bl	800141c <HAL_InitTick>
 8001bfe:	0003      	movs	r3, r0
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b004      	add	sp, #16
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	00001388 	.word	0x00001388
 8001c10:	40021000 	.word	0x40021000
 8001c14:	ffff84ff 	.word	0xffff84ff
 8001c18:	fffff0ff 	.word	0xfffff0ff
 8001c1c:	ffff8fff 	.word	0xffff8fff
 8001c20:	08001d20 	.word	0x08001d20
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2238      	movs	r2, #56	@ 0x38
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d10f      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0adb      	lsrs	r3, r3, #11
 8001c42:	2207      	movs	r2, #7
 8001c44:	4013      	ands	r3, r2
 8001c46:	2201      	movs	r2, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	4815      	ldr	r0, [pc, #84]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001c52:	f7fe fa59 	bl	8000108 <__udivsi3>
 8001c56:	0003      	movs	r3, r0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e01e      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2238      	movs	r2, #56	@ 0x38
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c68:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x80>)
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2238      	movs	r2, #56	@ 0x38
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d103      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	e00b      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	@ 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b18      	cmp	r3, #24
 8001c8c:	d103      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c8e:	23fa      	movs	r3, #250	@ 0xfa
 8001c90:	01db      	lsls	r3, r3, #7
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	e001      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	02dc6c00 	.word	0x02dc6c00
 8001cac:	007a1200 	.word	0x007a1200

08001cb0 <memset>:
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	1882      	adds	r2, r0, r2
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d100      	bne.n	8001cba <memset+0xa>
 8001cb8:	4770      	bx	lr
 8001cba:	7019      	strb	r1, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	e7f9      	b.n	8001cb4 <memset+0x4>

08001cc0 <__libc_init_array>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	2600      	movs	r6, #0
 8001cc4:	4c0c      	ldr	r4, [pc, #48]	@ (8001cf8 <__libc_init_array+0x38>)
 8001cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8001cfc <__libc_init_array+0x3c>)
 8001cc8:	1b64      	subs	r4, r4, r5
 8001cca:	10a4      	asrs	r4, r4, #2
 8001ccc:	42a6      	cmp	r6, r4
 8001cce:	d109      	bne.n	8001ce4 <__libc_init_array+0x24>
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	f000 f819 	bl	8001d08 <_init>
 8001cd6:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <__libc_init_array+0x40>)
 8001cd8:	4d0a      	ldr	r5, [pc, #40]	@ (8001d04 <__libc_init_array+0x44>)
 8001cda:	1b64      	subs	r4, r4, r5
 8001cdc:	10a4      	asrs	r4, r4, #2
 8001cde:	42a6      	cmp	r6, r4
 8001ce0:	d105      	bne.n	8001cee <__libc_init_array+0x2e>
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	00b3      	lsls	r3, r6, #2
 8001ce6:	58eb      	ldr	r3, [r5, r3]
 8001ce8:	4798      	blx	r3
 8001cea:	3601      	adds	r6, #1
 8001cec:	e7ee      	b.n	8001ccc <__libc_init_array+0xc>
 8001cee:	00b3      	lsls	r3, r6, #2
 8001cf0:	58eb      	ldr	r3, [r5, r3]
 8001cf2:	4798      	blx	r3
 8001cf4:	3601      	adds	r6, #1
 8001cf6:	e7f2      	b.n	8001cde <__libc_init_array+0x1e>
 8001cf8:	08001d60 	.word	0x08001d60
 8001cfc:	08001d60 	.word	0x08001d60
 8001d00:	08001d64 	.word	0x08001d64
 8001d04:	08001d60 	.word	0x08001d60

08001d08 <_init>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0e:	bc08      	pop	{r3}
 8001d10:	469e      	mov	lr, r3
 8001d12:	4770      	bx	lr

08001d14 <_fini>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	469e      	mov	lr, r3
 8001d1e:	4770      	bx	lr
